
Cvicenie4_VRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a64  0800013c  0800013c  0000813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08000ba0  08000ba0  00008ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08000ba4  08000ba4  00008ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000001c  20000000  08000ba8  00010000  2**2
                  ALLOC
  5 ._user_heap_stack 00000400  2000001c  08000ba8  0001001c  2**0
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  00008ba8  2**0
                  CONTENTS, READONLY
  7 .debug_info   000029f9  00000000  00000000  00008bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000084e  00000000  00000000  0000b5ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000410  00000000  00000000  0000be18  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a8  00000000  00000000  0000c228  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000145f  00000000  00000000  0000c5d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001278  00000000  00000000  0000da2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000082  00000000  00000000  0000eca7  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000c2c  00000000  00000000  0000ed2c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	08000b88 	.word	0x08000b88

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	08000b88 	.word	0x08000b88
 8000178:	20000004 	.word	0x20000004

0800017c <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800017c:	b580      	push	{r7, lr}
 800017e:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000180:	4b14      	ldr	r3, [pc, #80]	; (80001d4 <SystemInit+0x58>)
 8000182:	4a14      	ldr	r2, [pc, #80]	; (80001d4 <SystemInit+0x58>)
 8000184:	6812      	ldr	r2, [r2, #0]
 8000186:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800018a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 800018c:	4a11      	ldr	r2, [pc, #68]	; (80001d4 <SystemInit+0x58>)
 800018e:	4b11      	ldr	r3, [pc, #68]	; (80001d4 <SystemInit+0x58>)
 8000190:	6899      	ldr	r1, [r3, #8]
 8000192:	4b11      	ldr	r3, [pc, #68]	; (80001d8 <SystemInit+0x5c>)
 8000194:	400b      	ands	r3, r1
 8000196:	6093      	str	r3, [r2, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 8000198:	4a0e      	ldr	r2, [pc, #56]	; (80001d4 <SystemInit+0x58>)
 800019a:	4b0e      	ldr	r3, [pc, #56]	; (80001d4 <SystemInit+0x58>)
 800019c:	681b      	ldr	r3, [r3, #0]
 800019e:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80001a2:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80001a6:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80001a8:	4b0a      	ldr	r3, [pc, #40]	; (80001d4 <SystemInit+0x58>)
 80001aa:	4a0a      	ldr	r2, [pc, #40]	; (80001d4 <SystemInit+0x58>)
 80001ac:	6812      	ldr	r2, [r2, #0]
 80001ae:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80001b2:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80001b4:	4b07      	ldr	r3, [pc, #28]	; (80001d4 <SystemInit+0x58>)
 80001b6:	4a07      	ldr	r2, [pc, #28]	; (80001d4 <SystemInit+0x58>)
 80001b8:	6892      	ldr	r2, [r2, #8]
 80001ba:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80001be:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80001c0:	4b04      	ldr	r3, [pc, #16]	; (80001d4 <SystemInit+0x58>)
 80001c2:	2200      	movs	r2, #0
 80001c4:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80001c6:	f000 f80b 	bl	80001e0 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80001ca:	4b04      	ldr	r3, [pc, #16]	; (80001dc <SystemInit+0x60>)
 80001cc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80001d0:	609a      	str	r2, [r3, #8]
#endif
}
 80001d2:	bd80      	pop	{r7, pc}
 80001d4:	40023800 	.word	0x40023800
 80001d8:	88ffc00c 	.word	0x88ffc00c
 80001dc:	e000ed00 	.word	0xe000ed00

080001e0 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80001e0:	b480      	push	{r7}
 80001e2:	b083      	sub	sp, #12
 80001e4:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80001e6:	2300      	movs	r3, #0
 80001e8:	607b      	str	r3, [r7, #4]
 80001ea:	2300      	movs	r3, #0
 80001ec:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80001ee:	4b41      	ldr	r3, [pc, #260]	; (80002f4 <SetSysClock+0x114>)
 80001f0:	4a40      	ldr	r2, [pc, #256]	; (80002f4 <SetSysClock+0x114>)
 80001f2:	6812      	ldr	r2, [r2, #0]
 80001f4:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80001f8:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 80001fa:	4b3e      	ldr	r3, [pc, #248]	; (80002f4 <SetSysClock+0x114>)
 80001fc:	681b      	ldr	r3, [r3, #0]
 80001fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000202:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8000204:	687b      	ldr	r3, [r7, #4]
 8000206:	3301      	adds	r3, #1
 8000208:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800020a:	683b      	ldr	r3, [r7, #0]
 800020c:	2b00      	cmp	r3, #0
 800020e:	d103      	bne.n	8000218 <SetSysClock+0x38>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8000216:	d1f0      	bne.n	80001fa <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000218:	4b36      	ldr	r3, [pc, #216]	; (80002f4 <SetSysClock+0x114>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000220:	2b00      	cmp	r3, #0
 8000222:	d002      	beq.n	800022a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8000224:	2301      	movs	r3, #1
 8000226:	603b      	str	r3, [r7, #0]
 8000228:	e001      	b.n	800022e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800022a:	2300      	movs	r3, #0
 800022c:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	2b01      	cmp	r3, #1
 8000232:	d15a      	bne.n	80002ea <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 8000234:	4b30      	ldr	r3, [pc, #192]	; (80002f8 <SetSysClock+0x118>)
 8000236:	4a30      	ldr	r2, [pc, #192]	; (80002f8 <SetSysClock+0x118>)
 8000238:	6812      	ldr	r2, [r2, #0]
 800023a:	f042 0204 	orr.w	r2, r2, #4
 800023e:	601a      	str	r2, [r3, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000240:	4b2d      	ldr	r3, [pc, #180]	; (80002f8 <SetSysClock+0x118>)
 8000242:	4a2d      	ldr	r2, [pc, #180]	; (80002f8 <SetSysClock+0x118>)
 8000244:	6812      	ldr	r2, [r2, #0]
 8000246:	f042 0202 	orr.w	r2, r2, #2
 800024a:	601a      	str	r2, [r3, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 800024c:	4b2a      	ldr	r3, [pc, #168]	; (80002f8 <SetSysClock+0x118>)
 800024e:	4a2a      	ldr	r2, [pc, #168]	; (80002f8 <SetSysClock+0x118>)
 8000250:	6812      	ldr	r2, [r2, #0]
 8000252:	f042 0201 	orr.w	r2, r2, #1
 8000256:	601a      	str	r2, [r3, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000258:	4b26      	ldr	r3, [pc, #152]	; (80002f4 <SetSysClock+0x114>)
 800025a:	4a26      	ldr	r2, [pc, #152]	; (80002f4 <SetSysClock+0x114>)
 800025c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800025e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000262:	625a      	str	r2, [r3, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 8000264:	4b25      	ldr	r3, [pc, #148]	; (80002fc <SetSysClock+0x11c>)
 8000266:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800026a:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 800026c:	bf00      	nop
 800026e:	4b23      	ldr	r3, [pc, #140]	; (80002fc <SetSysClock+0x11c>)
 8000270:	685b      	ldr	r3, [r3, #4]
 8000272:	f003 0310 	and.w	r3, r3, #16
 8000276:	2b00      	cmp	r3, #0
 8000278:	d1f9      	bne.n	800026e <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 800027a:	4b1e      	ldr	r3, [pc, #120]	; (80002f4 <SetSysClock+0x114>)
 800027c:	4a1d      	ldr	r2, [pc, #116]	; (80002f4 <SetSysClock+0x114>)
 800027e:	6892      	ldr	r2, [r2, #8]
 8000280:	609a      	str	r2, [r3, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 8000282:	4b1c      	ldr	r3, [pc, #112]	; (80002f4 <SetSysClock+0x114>)
 8000284:	4a1b      	ldr	r2, [pc, #108]	; (80002f4 <SetSysClock+0x114>)
 8000286:	6892      	ldr	r2, [r2, #8]
 8000288:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 800028a:	4b1a      	ldr	r3, [pc, #104]	; (80002f4 <SetSysClock+0x114>)
 800028c:	4a19      	ldr	r2, [pc, #100]	; (80002f4 <SetSysClock+0x114>)
 800028e:	6892      	ldr	r2, [r2, #8]
 8000290:	609a      	str	r2, [r3, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 8000292:	4b18      	ldr	r3, [pc, #96]	; (80002f4 <SetSysClock+0x114>)
 8000294:	4a17      	ldr	r2, [pc, #92]	; (80002f4 <SetSysClock+0x114>)
 8000296:	6892      	ldr	r2, [r2, #8]
 8000298:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 800029c:	609a      	str	r2, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 800029e:	4b15      	ldr	r3, [pc, #84]	; (80002f4 <SetSysClock+0x114>)
 80002a0:	4a14      	ldr	r2, [pc, #80]	; (80002f4 <SetSysClock+0x114>)
 80002a2:	6892      	ldr	r2, [r2, #8]
 80002a4:	f442 0211 	orr.w	r2, r2, #9502720	; 0x910000
 80002a8:	609a      	str	r2, [r3, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80002aa:	4b12      	ldr	r3, [pc, #72]	; (80002f4 <SetSysClock+0x114>)
 80002ac:	4a11      	ldr	r2, [pc, #68]	; (80002f4 <SetSysClock+0x114>)
 80002ae:	6812      	ldr	r2, [r2, #0]
 80002b0:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80002b4:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80002b6:	bf00      	nop
 80002b8:	4b0e      	ldr	r3, [pc, #56]	; (80002f4 <SetSysClock+0x114>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d0f9      	beq.n	80002b8 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80002c4:	4b0b      	ldr	r3, [pc, #44]	; (80002f4 <SetSysClock+0x114>)
 80002c6:	4a0b      	ldr	r2, [pc, #44]	; (80002f4 <SetSysClock+0x114>)
 80002c8:	6892      	ldr	r2, [r2, #8]
 80002ca:	f022 0203 	bic.w	r2, r2, #3
 80002ce:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <SetSysClock+0x114>)
 80002d2:	4a08      	ldr	r2, [pc, #32]	; (80002f4 <SetSysClock+0x114>)
 80002d4:	6892      	ldr	r2, [r2, #8]
 80002d6:	f042 0203 	orr.w	r2, r2, #3
 80002da:	609a      	str	r2, [r3, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80002dc:	bf00      	nop
 80002de:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <SetSysClock+0x114>)
 80002e0:	689b      	ldr	r3, [r3, #8]
 80002e2:	f003 030c 	and.w	r3, r3, #12
 80002e6:	2b0c      	cmp	r3, #12
 80002e8:	d1f9      	bne.n	80002de <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	40023800 	.word	0x40023800
 80002f8:	40023c00 	.word	0x40023c00
 80002fc:	40007000 	.word	0x40007000

08000300 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000300:	b480      	push	{r7}
 8000302:	af00      	add	r7, sp, #0
}
 8000304:	46bd      	mov	sp, r7
 8000306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030a:	4770      	bx	lr

0800030c <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800030c:	b480      	push	{r7}
 800030e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000310:	e7fe      	b.n	8000310 <HardFault_Handler+0x4>
 8000312:	bf00      	nop

08000314 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000318:	e7fe      	b.n	8000318 <MemManage_Handler+0x4>
 800031a:	bf00      	nop

0800031c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000320:	e7fe      	b.n	8000320 <BusFault_Handler+0x4>
 8000322:	bf00      	nop

08000324 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000328:	e7fe      	b.n	8000328 <UsageFault_Handler+0x4>
 800032a:	bf00      	nop

0800032c <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
}
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr

08000338 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
}
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr

08000344 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
}
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 8000354:	46bd      	mov	sp, r7
 8000356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035a:	4770      	bx	lr

0800035c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800035c:	f8df d03c 	ldr.w	sp, [pc, #60]	; 800039c <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000360:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000362:	f000 b804 	b.w	800036e <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000366:	4b0e      	ldr	r3, [pc, #56]	; (80003a0 <LoopFillZerobss+0x1a>)
  ldr r3, [r3, r1]
 8000368:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800036a:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800036c:	3104      	adds	r1, #4

0800036e <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800036e:	480d      	ldr	r0, [pc, #52]	; (80003a4 <LoopFillZerobss+0x1e>)
  ldr r3, =_edata
 8000370:	4b0d      	ldr	r3, [pc, #52]	; (80003a8 <LoopFillZerobss+0x22>)
  adds r2, r0, r1
 8000372:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000374:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000376:	f4ff aff6 	bcc.w	8000366 <CopyDataInit>
  ldr r2, =_sbss
 800037a:	4a0c      	ldr	r2, [pc, #48]	; (80003ac <LoopFillZerobss+0x26>)
  b LoopFillZerobss
 800037c:	f000 b803 	b.w	8000386 <LoopFillZerobss>

08000380 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000380:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000382:	f842 3b04 	str.w	r3, [r2], #4

08000386 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000386:	4b0a      	ldr	r3, [pc, #40]	; (80003b0 <LoopFillZerobss+0x2a>)
  cmp r2, r3
 8000388:	429a      	cmp	r2, r3
  bcc FillZerobss
 800038a:	f4ff aff9 	bcc.w	8000380 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800038e:	f7ff fef5 	bl	800017c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000392:	f000 fbd3 	bl	8000b3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000396:	f000 f87b 	bl	8000490 <main>
  bx lr
 800039a:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800039c:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80003a0:	08000ba8 	.word	0x08000ba8
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80003a8:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80003b0:	2000001c 	.word	0x2000001c

080003b4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	f7ff bffe 	b.w	80003b4 <ADC1_IRQHandler>

080003b8 <LED_init>:
#include <stddef.h>
#include "stm32l1xx.h"


void LED_init()
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b082      	sub	sp, #8
 80003bc:	af00      	add	r7, sp, #0
	  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 80003be:	2001      	movs	r0, #1
 80003c0:	2101      	movs	r1, #1
 80003c2:	f000 f88f 	bl	80004e4 <RCC_AHBPeriphClockCmd>
	  GPIO_InitTypeDef GPIO_Init_LED;

	  GPIO_Init_LED.GPIO_Mode = GPIO_Mode_OUT;
 80003c6:	2301      	movs	r3, #1
 80003c8:	713b      	strb	r3, [r7, #4]
	  GPIO_Init_LED.GPIO_OType = GPIO_OType_PP;
 80003ca:	2300      	movs	r3, #0
 80003cc:	71bb      	strb	r3, [r7, #6]
	  GPIO_Init_LED.GPIO_Pin = GPIO_Pin_5;
 80003ce:	2320      	movs	r3, #32
 80003d0:	603b      	str	r3, [r7, #0]
	  GPIO_Init_LED.GPIO_Speed = GPIO_Speed_40MHz;
 80003d2:	2303      	movs	r3, #3
 80003d4:	717b      	strb	r3, [r7, #5]

	  GPIO_Init(GPIOA,&GPIO_Init_LED);
 80003d6:	463b      	mov	r3, r7
 80003d8:	4803      	ldr	r0, [pc, #12]	; (80003e8 <LED_init+0x30>)
 80003da:	4619      	mov	r1, r3
 80003dc:	f000 f8f2 	bl	80005c4 <GPIO_Init>
}
 80003e0:	3708      	adds	r7, #8
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}
 80003e6:	bf00      	nop
 80003e8:	40020000 	.word	0x40020000

080003ec <adc_init>:

void adc_init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b088      	sub	sp, #32
 80003f0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	/* Enable GPIO clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80003f2:	2001      	movs	r0, #1
 80003f4:	2101      	movs	r1, #1
 80003f6:	f000 f875 	bl	80004e4 <RCC_AHBPeriphClockCmd>

	/* Configure ADCx Channel 2 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 80003fa:	2302      	movs	r3, #2
 80003fc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 80003fe:	2303      	movs	r3, #3
 8000400:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 8000402:	2300      	movs	r3, #0
 8000404:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 8000406:	f107 0318 	add.w	r3, r7, #24
 800040a:	481f      	ldr	r0, [pc, #124]	; (8000488 <adc_init+0x9c>)
 800040c:	4619      	mov	r1, r3
 800040e:	f000 f8d9 	bl	80005c4 <GPIO_Init>

	/* Enable the HSI oscillator */
	RCC_HSICmd(ENABLE);
 8000412:	2001      	movs	r0, #1
 8000414:	f000 f856 	bl	80004c4 <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000418:	bf00      	nop
 800041a:	2021      	movs	r0, #33	; 0x21
 800041c:	f000 f89e 	bl	800055c <RCC_GetFlagStatus>
 8000420:	4603      	mov	r3, r0
 8000422:	2b00      	cmp	r3, #0
 8000424:	d0f9      	beq.n	800041a <adc_init+0x2e>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 8000426:	f44f 7000 	mov.w	r0, #512	; 0x200
 800042a:	2101      	movs	r1, #1
 800042c:	f000 f878 	bl	8000520 <RCC_APB2PeriphClockCmd>

	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 8000430:	463b      	mov	r3, r7
 8000432:	4618      	mov	r0, r3
 8000434:	f000 f9ae 	bl	8000794 <ADC_StructInit>

	/* ADC1 configuration */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000438:	2300      	movs	r3, #0
 800043a:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 800043c:	2300      	movs	r3, #0
 800043e:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000440:	2300      	movs	r3, #0
 8000442:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 8000444:	2300      	movs	r3, #0
 8000446:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000448:	2301      	movs	r3, #1
 800044a:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 800044c:	463b      	mov	r3, r7
 800044e:	480f      	ldr	r0, [pc, #60]	; (800048c <adc_init+0xa0>)
 8000450:	4619      	mov	r1, r3
 8000452:	f000 f94b 	bl	80006ec <ADC_Init>
	/* ADCx regular channel8 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_16Cycles);
 8000456:	480d      	ldr	r0, [pc, #52]	; (800048c <adc_init+0xa0>)
 8000458:	2101      	movs	r1, #1
 800045a:	2201      	movs	r2, #1
 800045c:	2302      	movs	r3, #2
 800045e:	f000 f9d5 	bl	800080c <ADC_RegularChannelConfig>
	/* Enable the ADC */
	ADC_Cmd(ADC1, ENABLE);
 8000462:	480a      	ldr	r0, [pc, #40]	; (800048c <adc_init+0xa0>)
 8000464:	2101      	movs	r1, #1
 8000466:	f000 f9b5 	bl	80007d4 <ADC_Cmd>
	/* Wait until the ADC1 is ready */
	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 800046a:	bf00      	nop
 800046c:	4807      	ldr	r0, [pc, #28]	; (800048c <adc_init+0xa0>)
 800046e:	2140      	movs	r1, #64	; 0x40
 8000470:	f000 fb4a 	bl	8000b08 <ADC_GetFlagStatus>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d0f8      	beq.n	800046c <adc_init+0x80>
	/* Start ADC Software Conversion */
	ADC_SoftwareStartConv(ADC1);
 800047a:	4804      	ldr	r0, [pc, #16]	; (800048c <adc_init+0xa0>)
 800047c:	f000 fb26 	bl	8000acc <ADC_SoftwareStartConv>
}
 8000480:	3720      	adds	r7, #32
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40020000 	.word	0x40020000
 800048c:	40012400 	.word	0x40012400

08000490 <main>:

int main(void)
{
 8000490:	b580      	push	{r7, lr}
 8000492:	b082      	sub	sp, #8
 8000494:	af00      	add	r7, sp, #0
	float i;
	adc_init();
 8000496:	f7ff ffa9 	bl	80003ec <adc_init>
	LED_init();
 800049a:	f7ff ff8d 	bl	80003b8 <LED_init>
	uint16_t AD_value;


  while (1)
  {
	  	ADC_SoftwareStartConv(ADC1);
 800049e:	4808      	ldr	r0, [pc, #32]	; (80004c0 <main+0x30>)
 80004a0:	f000 fb14 	bl	8000acc <ADC_SoftwareStartConv>
	   //wait for conversion complete

	  	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
 80004a4:	bf00      	nop
 80004a6:	4806      	ldr	r0, [pc, #24]	; (80004c0 <main+0x30>)
 80004a8:	2102      	movs	r1, #2
 80004aa:	f000 fb2d 	bl	8000b08 <ADC_GetFlagStatus>
 80004ae:	4603      	mov	r3, r0
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d0f8      	beq.n	80004a6 <main+0x16>
	  	//read ADC value

	  	AD_value = ADC_GetConversionValue(ADC1);
 80004b4:	4802      	ldr	r0, [pc, #8]	; (80004c0 <main+0x30>)
 80004b6:	f000 fb19 	bl	8000aec <ADC_GetConversionValue>
 80004ba:	4603      	mov	r3, r0
 80004bc:	80fb      	strh	r3, [r7, #6]
  }
 80004be:	e7ee      	b.n	800049e <main+0xe>
 80004c0:	40012400 	.word	0x40012400

080004c4 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 80004ce:	4b04      	ldr	r3, [pc, #16]	; (80004e0 <RCC_HSICmd+0x1c>)
 80004d0:	79fa      	ldrb	r2, [r7, #7]
 80004d2:	601a      	str	r2, [r3, #0]
}
 80004d4:	370c      	adds	r7, #12
 80004d6:	46bd      	mov	sp, r7
 80004d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004dc:	4770      	bx	lr
 80004de:	bf00      	nop
 80004e0:	42470000 	.word	0x42470000

080004e4 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80004e4:	b480      	push	{r7}
 80004e6:	b083      	sub	sp, #12
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
 80004ec:	460b      	mov	r3, r1
 80004ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80004f0:	78fb      	ldrb	r3, [r7, #3]
 80004f2:	2b00      	cmp	r3, #0
 80004f4:	d006      	beq.n	8000504 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80004f6:	4b09      	ldr	r3, [pc, #36]	; (800051c <RCC_AHBPeriphClockCmd+0x38>)
 80004f8:	4a08      	ldr	r2, [pc, #32]	; (800051c <RCC_AHBPeriphClockCmd+0x38>)
 80004fa:	69d1      	ldr	r1, [r2, #28]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	430a      	orrs	r2, r1
 8000500:	61da      	str	r2, [r3, #28]
 8000502:	e006      	b.n	8000512 <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <RCC_AHBPeriphClockCmd+0x38>)
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <RCC_AHBPeriphClockCmd+0x38>)
 8000508:	69d1      	ldr	r1, [r2, #28]
 800050a:	687a      	ldr	r2, [r7, #4]
 800050c:	43d2      	mvns	r2, r2
 800050e:	400a      	ands	r2, r1
 8000510:	61da      	str	r2, [r3, #28]
  }
}
 8000512:	370c      	adds	r7, #12
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40023800 	.word	0x40023800

08000520 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000520:	b480      	push	{r7}
 8000522:	b083      	sub	sp, #12
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
 8000528:	460b      	mov	r3, r1
 800052a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 800052c:	78fb      	ldrb	r3, [r7, #3]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d006      	beq.n	8000540 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000532:	4b09      	ldr	r3, [pc, #36]	; (8000558 <RCC_APB2PeriphClockCmd+0x38>)
 8000534:	4a08      	ldr	r2, [pc, #32]	; (8000558 <RCC_APB2PeriphClockCmd+0x38>)
 8000536:	6a11      	ldr	r1, [r2, #32]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	430a      	orrs	r2, r1
 800053c:	621a      	str	r2, [r3, #32]
 800053e:	e006      	b.n	800054e <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000540:	4b05      	ldr	r3, [pc, #20]	; (8000558 <RCC_APB2PeriphClockCmd+0x38>)
 8000542:	4a05      	ldr	r2, [pc, #20]	; (8000558 <RCC_APB2PeriphClockCmd+0x38>)
 8000544:	6a11      	ldr	r1, [r2, #32]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	43d2      	mvns	r2, r2
 800054a:	400a      	ands	r2, r1
 800054c:	621a      	str	r2, [r3, #32]
  }
}
 800054e:	370c      	adds	r7, #12
 8000550:	46bd      	mov	sp, r7
 8000552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000556:	4770      	bx	lr
 8000558:	40023800 	.word	0x40023800

0800055c <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 800055c:	b480      	push	{r7}
 800055e:	b087      	sub	sp, #28
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000566:	2300      	movs	r3, #0
 8000568:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 800056a:	2300      	movs	r3, #0
 800056c:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 800056e:	2300      	movs	r3, #0
 8000570:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	095b      	lsrs	r3, r3, #5
 8000576:	b2db      	uxtb	r3, r3
 8000578:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	2b01      	cmp	r3, #1
 800057e:	d103      	bne.n	8000588 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000580:	4b0f      	ldr	r3, [pc, #60]	; (80005c0 <RCC_GetFlagStatus+0x64>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	617b      	str	r3, [r7, #20]
 8000586:	e002      	b.n	800058e <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000588:	4b0d      	ldr	r3, [pc, #52]	; (80005c0 <RCC_GetFlagStatus+0x64>)
 800058a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800058c:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 800058e:	79fb      	ldrb	r3, [r7, #7]
 8000590:	f003 031f 	and.w	r3, r3, #31
 8000594:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000596:	68fb      	ldr	r3, [r7, #12]
 8000598:	697a      	ldr	r2, [r7, #20]
 800059a:	fa22 f303 	lsr.w	r3, r2, r3
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d002      	beq.n	80005ac <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 80005a6:	2301      	movs	r3, #1
 80005a8:	74fb      	strb	r3, [r7, #19]
 80005aa:	e001      	b.n	80005b0 <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 80005ac:	2300      	movs	r3, #0
 80005ae:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 80005b0:	7cfb      	ldrb	r3, [r7, #19]
}
 80005b2:	4618      	mov	r0, r3
 80005b4:	371c      	adds	r7, #28
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	40023800 	.word	0x40023800

080005c4 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b087      	sub	sp, #28
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80005ce:	2300      	movs	r3, #0
 80005d0:	617b      	str	r3, [r7, #20]
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	2300      	movs	r3, #0
 80005d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]
 80005de:	e07c      	b.n	80006da <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80005e0:	697b      	ldr	r3, [r7, #20]
 80005e2:	2201      	movs	r2, #1
 80005e4:	fa02 f303 	lsl.w	r3, r2, r3
 80005e8:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	681a      	ldr	r2, [r3, #0]
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	4013      	ands	r3, r2
 80005f2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80005f4:	68fa      	ldr	r2, [r7, #12]
 80005f6:	693b      	ldr	r3, [r7, #16]
 80005f8:	429a      	cmp	r2, r3
 80005fa:	d16b      	bne.n	80006d4 <GPIO_Init+0x110>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	681a      	ldr	r2, [r3, #0]
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	2103      	movs	r1, #3
 8000606:	fa01 f303 	lsl.w	r3, r1, r3
 800060a:	43db      	mvns	r3, r3
 800060c:	401a      	ands	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	683b      	ldr	r3, [r7, #0]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	4619      	mov	r1, r3
 800061c:	697b      	ldr	r3, [r7, #20]
 800061e:	005b      	lsls	r3, r3, #1
 8000620:	fa01 f303 	lsl.w	r3, r1, r3
 8000624:	431a      	orrs	r2, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800062a:	683b      	ldr	r3, [r7, #0]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	2b01      	cmp	r3, #1
 8000630:	d003      	beq.n	800063a <GPIO_Init+0x76>
 8000632:	683b      	ldr	r3, [r7, #0]
 8000634:	791b      	ldrb	r3, [r3, #4]
 8000636:	2b02      	cmp	r3, #2
 8000638:	d134      	bne.n	80006a4 <GPIO_Init+0xe0>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	697b      	ldr	r3, [r7, #20]
 8000640:	005b      	lsls	r3, r3, #1
 8000642:	2103      	movs	r1, #3
 8000644:	fa01 f303 	lsl.w	r3, r1, r3
 8000648:	43db      	mvns	r3, r3
 800064a:	401a      	ands	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	689a      	ldr	r2, [r3, #8]
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	795b      	ldrb	r3, [r3, #5]
 8000658:	4619      	mov	r1, r3
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	005b      	lsls	r3, r3, #1
 800065e:	fa01 f303 	lsl.w	r3, r1, r3
 8000662:	431a      	orrs	r2, r3
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	889b      	ldrh	r3, [r3, #4]
 800066c:	b29a      	uxth	r2, r3
 800066e:	697b      	ldr	r3, [r7, #20]
 8000670:	b29b      	uxth	r3, r3
 8000672:	2101      	movs	r1, #1
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	b29b      	uxth	r3, r3
 800067a:	43db      	mvns	r3, r3
 800067c:	b29b      	uxth	r3, r3
 800067e:	4013      	ands	r3, r2
 8000680:	b29a      	uxth	r2, r3
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	889b      	ldrh	r3, [r3, #4]
 800068a:	b29a      	uxth	r2, r3
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	799b      	ldrb	r3, [r3, #6]
 8000690:	4619      	mov	r1, r3
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	b29b      	uxth	r3, r3
 8000696:	fa01 f303 	lsl.w	r3, r1, r3
 800069a:	b29b      	uxth	r3, r3
 800069c:	4313      	orrs	r3, r2
 800069e:	b29a      	uxth	r2, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	68da      	ldr	r2, [r3, #12]
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	2103      	movs	r1, #3
 80006b0:	fa01 f303 	lsl.w	r3, r1, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	401a      	ands	r2, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	68da      	ldr	r2, [r3, #12]
 80006c0:	683b      	ldr	r3, [r7, #0]
 80006c2:	79db      	ldrb	r3, [r3, #7]
 80006c4:	4619      	mov	r1, r3
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	fa01 f303 	lsl.w	r3, r1, r3
 80006ce:	431a      	orrs	r2, r3
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	3301      	adds	r3, #1
 80006d8:	617b      	str	r3, [r7, #20]
 80006da:	697b      	ldr	r3, [r7, #20]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	f67f af7f 	bls.w	80005e0 <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 80006e2:	371c      	adds	r7, #28
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800070a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800070e:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	791b      	ldrb	r3, [r3, #4]
 8000714:	021a      	lsls	r2, r3, #8
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	4313      	orrs	r3, r2
 800071c:	68fa      	ldr	r2, [r7, #12]
 800071e:	4313      	orrs	r3, r2
 8000720:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	68fa      	ldr	r2, [r7, #12]
 8000726:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	4b17      	ldr	r3, [pc, #92]	; (8000790 <ADC_Init+0xa4>)
 8000732:	4013      	ands	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	691a      	ldr	r2, [r3, #16]
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	68db      	ldr	r3, [r3, #12]
 800073e:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000744:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000746:	683b      	ldr	r3, [r7, #0]
 8000748:	795b      	ldrb	r3, [r3, #5]
 800074a:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 800074c:	4313      	orrs	r3, r2
 800074e:	68fa      	ldr	r2, [r7, #12]
 8000750:	4313      	orrs	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	68fa      	ldr	r2, [r7, #12]
 8000758:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 8000766:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	7d1b      	ldrb	r3, [r3, #20]
 800076c:	3b01      	subs	r3, #1
 800076e:	b2da      	uxtb	r2, r3
 8000770:	7afb      	ldrb	r3, [r7, #11]
 8000772:	4313      	orrs	r3, r2
 8000774:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000776:	7afb      	ldrb	r3, [r7, #11]
 8000778:	051b      	lsls	r3, r3, #20
 800077a:	68fa      	ldr	r2, [r7, #12]
 800077c:	4313      	orrs	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	68fa      	ldr	r2, [r7, #12]
 8000784:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000786:	3714      	adds	r7, #20
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	c0fff7fd 	.word	0xc0fff7fd

08000794 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	2200      	movs	r2, #0
 80007a0:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	2200      	movs	r2, #0
 80007a6:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	2200      	movs	r2, #0
 80007ac:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2200      	movs	r2, #0
 80007b2:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80007ba:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2200      	movs	r2, #0
 80007c0:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	2201      	movs	r2, #1
 80007c6:	751a      	strb	r2, [r3, #20]
}
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop

080007d4 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b083      	sub	sp, #12
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	460b      	mov	r3, r1
 80007de:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80007e0:	78fb      	ldrb	r3, [r7, #3]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d006      	beq.n	80007f4 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	689b      	ldr	r3, [r3, #8]
 80007ea:	f043 0201 	orr.w	r2, r3, #1
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	e005      	b.n	8000800 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	689b      	ldr	r3, [r3, #8]
 80007f8:	f023 0201 	bic.w	r2, r3, #1
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	609a      	str	r2, [r3, #8]
  }
}
 8000800:	370c      	adds	r7, #12
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop

0800080c <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
 8000814:	70f9      	strb	r1, [r7, #3]
 8000816:	70ba      	strb	r2, [r7, #2]
 8000818:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	2300      	movs	r3, #0
 8000820:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8000822:	78fb      	ldrb	r3, [r7, #3]
 8000824:	2b1d      	cmp	r3, #29
 8000826:	d923      	bls.n	8000870 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800082c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 800082e:	78fb      	ldrb	r3, [r7, #3]
 8000830:	f1a3 021e 	sub.w	r2, r3, #30
 8000834:	4613      	mov	r3, r2
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	4413      	add	r3, r2
 800083a:	2207      	movs	r2, #7
 800083c:	fa02 f303 	lsl.w	r3, r2, r3
 8000840:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000842:	68bb      	ldr	r3, [r7, #8]
 8000844:	43db      	mvns	r3, r3
 8000846:	68fa      	ldr	r2, [r7, #12]
 8000848:	4013      	ands	r3, r2
 800084a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 800084c:	7879      	ldrb	r1, [r7, #1]
 800084e:	78fb      	ldrb	r3, [r7, #3]
 8000850:	f1a3 021e 	sub.w	r2, r3, #30
 8000854:	4613      	mov	r3, r2
 8000856:	005b      	lsls	r3, r3, #1
 8000858:	4413      	add	r3, r2
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	65da      	str	r2, [r3, #92]	; 0x5c
 800086e:	e06c      	b.n	800094a <ADC_RegularChannelConfig+0x13e>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000870:	78fb      	ldrb	r3, [r7, #3]
 8000872:	2b13      	cmp	r3, #19
 8000874:	d923      	bls.n	80008be <ADC_RegularChannelConfig+0xb2>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	68db      	ldr	r3, [r3, #12]
 800087a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 800087c:	78fb      	ldrb	r3, [r7, #3]
 800087e:	f1a3 0214 	sub.w	r2, r3, #20
 8000882:	4613      	mov	r3, r2
 8000884:	005b      	lsls	r3, r3, #1
 8000886:	4413      	add	r3, r2
 8000888:	2207      	movs	r2, #7
 800088a:	fa02 f303 	lsl.w	r3, r2, r3
 800088e:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000890:	68bb      	ldr	r3, [r7, #8]
 8000892:	43db      	mvns	r3, r3
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	4013      	ands	r3, r2
 8000898:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 800089a:	7879      	ldrb	r1, [r7, #1]
 800089c:	78fb      	ldrb	r3, [r7, #3]
 800089e:	f1a3 0214 	sub.w	r2, r3, #20
 80008a2:	4613      	mov	r3, r2
 80008a4:	005b      	lsls	r3, r3, #1
 80008a6:	4413      	add	r3, r2
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80008ae:	68fa      	ldr	r2, [r7, #12]
 80008b0:	68bb      	ldr	r3, [r7, #8]
 80008b2:	4313      	orrs	r3, r2
 80008b4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	68fa      	ldr	r2, [r7, #12]
 80008ba:	60da      	str	r2, [r3, #12]
 80008bc:	e045      	b.n	800094a <ADC_RegularChannelConfig+0x13e>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 80008be:	78fb      	ldrb	r3, [r7, #3]
 80008c0:	2b09      	cmp	r3, #9
 80008c2:	d923      	bls.n	800090c <ADC_RegularChannelConfig+0x100>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	691b      	ldr	r3, [r3, #16]
 80008c8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 80008ca:	78fb      	ldrb	r3, [r7, #3]
 80008cc:	f1a3 020a 	sub.w	r2, r3, #10
 80008d0:	4613      	mov	r3, r2
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	2207      	movs	r2, #7
 80008d8:	fa02 f303 	lsl.w	r3, r2, r3
 80008dc:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	43db      	mvns	r3, r3
 80008e2:	68fa      	ldr	r2, [r7, #12]
 80008e4:	4013      	ands	r3, r2
 80008e6:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 80008e8:	7879      	ldrb	r1, [r7, #1]
 80008ea:	78fb      	ldrb	r3, [r7, #3]
 80008ec:	f1a3 020a 	sub.w	r2, r3, #10
 80008f0:	4613      	mov	r3, r2
 80008f2:	005b      	lsls	r3, r3, #1
 80008f4:	4413      	add	r3, r2
 80008f6:	fa01 f303 	lsl.w	r3, r1, r3
 80008fa:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80008fc:	68fa      	ldr	r2, [r7, #12]
 80008fe:	68bb      	ldr	r3, [r7, #8]
 8000900:	4313      	orrs	r3, r2
 8000902:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	611a      	str	r2, [r3, #16]
 800090a:	e01e      	b.n	800094a <ADC_RegularChannelConfig+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	695b      	ldr	r3, [r3, #20]
 8000910:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000912:	78fa      	ldrb	r2, [r7, #3]
 8000914:	4613      	mov	r3, r2
 8000916:	005b      	lsls	r3, r3, #1
 8000918:	4413      	add	r3, r2
 800091a:	2207      	movs	r2, #7
 800091c:	fa02 f303 	lsl.w	r3, r2, r3
 8000920:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000922:	68bb      	ldr	r3, [r7, #8]
 8000924:	43db      	mvns	r3, r3
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4013      	ands	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 800092c:	7879      	ldrb	r1, [r7, #1]
 800092e:	78fa      	ldrb	r2, [r7, #3]
 8000930:	4613      	mov	r3, r2
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4413      	add	r3, r2
 8000936:	fa01 f303 	lsl.w	r3, r1, r3
 800093a:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800093c:	68fa      	ldr	r2, [r7, #12]
 800093e:	68bb      	ldr	r3, [r7, #8]
 8000940:	4313      	orrs	r3, r2
 8000942:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	68fa      	ldr	r2, [r7, #12]
 8000948:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 800094a:	78bb      	ldrb	r3, [r7, #2]
 800094c:	2b06      	cmp	r3, #6
 800094e:	d821      	bhi.n	8000994 <ADC_RegularChannelConfig+0x188>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8000956:	78bb      	ldrb	r3, [r7, #2]
 8000958:	1e5a      	subs	r2, r3, #1
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	4413      	add	r3, r2
 8000960:	221f      	movs	r2, #31
 8000962:	fa02 f303 	lsl.w	r3, r2, r3
 8000966:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000968:	68bb      	ldr	r3, [r7, #8]
 800096a:	43db      	mvns	r3, r3
 800096c:	68fa      	ldr	r2, [r7, #12]
 800096e:	4013      	ands	r3, r2
 8000970:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000972:	78f9      	ldrb	r1, [r7, #3]
 8000974:	78bb      	ldrb	r3, [r7, #2]
 8000976:	1e5a      	subs	r2, r3, #1
 8000978:	4613      	mov	r3, r2
 800097a:	009b      	lsls	r3, r3, #2
 800097c:	4413      	add	r3, r2
 800097e:	fa01 f303 	lsl.w	r3, r1, r3
 8000982:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	68bb      	ldr	r3, [r7, #8]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	641a      	str	r2, [r3, #64]	; 0x40
 8000992:	e095      	b.n	8000ac0 <ADC_RegularChannelConfig+0x2b4>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000994:	78bb      	ldrb	r3, [r7, #2]
 8000996:	2b0c      	cmp	r3, #12
 8000998:	d821      	bhi.n	80009de <ADC_RegularChannelConfig+0x1d2>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800099e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 80009a0:	78bb      	ldrb	r3, [r7, #2]
 80009a2:	1fda      	subs	r2, r3, #7
 80009a4:	4613      	mov	r3, r2
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	4413      	add	r3, r2
 80009aa:	221f      	movs	r2, #31
 80009ac:	fa02 f303 	lsl.w	r3, r2, r3
 80009b0:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	43db      	mvns	r3, r3
 80009b6:	68fa      	ldr	r2, [r7, #12]
 80009b8:	4013      	ands	r3, r2
 80009ba:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 80009bc:	78f9      	ldrb	r1, [r7, #3]
 80009be:	78bb      	ldrb	r3, [r7, #2]
 80009c0:	1fda      	subs	r2, r3, #7
 80009c2:	4613      	mov	r3, r2
 80009c4:	009b      	lsls	r3, r3, #2
 80009c6:	4413      	add	r3, r2
 80009c8:	fa01 f303 	lsl.w	r3, r1, r3
 80009cc:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 80009ce:	68fa      	ldr	r2, [r7, #12]
 80009d0:	68bb      	ldr	r3, [r7, #8]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	68fa      	ldr	r2, [r7, #12]
 80009da:	63da      	str	r2, [r3, #60]	; 0x3c
 80009dc:	e070      	b.n	8000ac0 <ADC_RegularChannelConfig+0x2b4>
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 80009de:	78bb      	ldrb	r3, [r7, #2]
 80009e0:	2b12      	cmp	r3, #18
 80009e2:	d823      	bhi.n	8000a2c <ADC_RegularChannelConfig+0x220>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009e8:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 80009ea:	78bb      	ldrb	r3, [r7, #2]
 80009ec:	f1a3 020d 	sub.w	r2, r3, #13
 80009f0:	4613      	mov	r3, r2
 80009f2:	009b      	lsls	r3, r3, #2
 80009f4:	4413      	add	r3, r2
 80009f6:	221f      	movs	r2, #31
 80009f8:	fa02 f303 	lsl.w	r3, r2, r3
 80009fc:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80009fe:	68bb      	ldr	r3, [r7, #8]
 8000a00:	43db      	mvns	r3, r3
 8000a02:	68fa      	ldr	r2, [r7, #12]
 8000a04:	4013      	ands	r3, r2
 8000a06:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000a08:	78f9      	ldrb	r1, [r7, #3]
 8000a0a:	78bb      	ldrb	r3, [r7, #2]
 8000a0c:	f1a3 020d 	sub.w	r2, r3, #13
 8000a10:	4613      	mov	r3, r2
 8000a12:	009b      	lsls	r3, r3, #2
 8000a14:	4413      	add	r3, r2
 8000a16:	fa01 f303 	lsl.w	r3, r1, r3
 8000a1a:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a1c:	68fa      	ldr	r2, [r7, #12]
 8000a1e:	68bb      	ldr	r3, [r7, #8]
 8000a20:	4313      	orrs	r3, r2
 8000a22:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	68fa      	ldr	r2, [r7, #12]
 8000a28:	639a      	str	r2, [r3, #56]	; 0x38
 8000a2a:	e049      	b.n	8000ac0 <ADC_RegularChannelConfig+0x2b4>
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 8000a2c:	78bb      	ldrb	r3, [r7, #2]
 8000a2e:	2b18      	cmp	r3, #24
 8000a30:	d823      	bhi.n	8000a7a <ADC_RegularChannelConfig+0x26e>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a36:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000a38:	78bb      	ldrb	r3, [r7, #2]
 8000a3a:	f1a3 0213 	sub.w	r2, r3, #19
 8000a3e:	4613      	mov	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4413      	add	r3, r2
 8000a44:	221f      	movs	r2, #31
 8000a46:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a4c:	68bb      	ldr	r3, [r7, #8]
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	68fa      	ldr	r2, [r7, #12]
 8000a52:	4013      	ands	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000a56:	78f9      	ldrb	r1, [r7, #3]
 8000a58:	78bb      	ldrb	r3, [r7, #2]
 8000a5a:	f1a3 0213 	sub.w	r2, r3, #19
 8000a5e:	4613      	mov	r3, r2
 8000a60:	009b      	lsls	r3, r3, #2
 8000a62:	4413      	add	r3, r2
 8000a64:	fa01 f303 	lsl.w	r3, r1, r3
 8000a68:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000a6a:	68fa      	ldr	r2, [r7, #12]
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	635a      	str	r2, [r3, #52]	; 0x34
 8000a78:	e022      	b.n	8000ac0 <ADC_RegularChannelConfig+0x2b4>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a7e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000a80:	78bb      	ldrb	r3, [r7, #2]
 8000a82:	f1a3 0219 	sub.w	r2, r3, #25
 8000a86:	4613      	mov	r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	4413      	add	r3, r2
 8000a8c:	221f      	movs	r2, #31
 8000a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a92:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000a94:	68bb      	ldr	r3, [r7, #8]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	68fa      	ldr	r2, [r7, #12]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8000a9e:	78f9      	ldrb	r1, [r7, #3]
 8000aa0:	78bb      	ldrb	r3, [r7, #2]
 8000aa2:	f1a3 0219 	sub.w	r2, r3, #25
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	009b      	lsls	r3, r3, #2
 8000aaa:	4413      	add	r3, r2
 8000aac:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ab2:	68fa      	ldr	r2, [r7, #12]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	4313      	orrs	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	68fa      	ldr	r2, [r7, #12]
 8000abe:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000ac0:	3714      	adds	r7, #20
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop

08000acc <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000acc:	b480      	push	{r7}
 8000ace:	b083      	sub	sp, #12
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	689b      	ldr	r3, [r3, #8]
 8000ad8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	609a      	str	r2, [r3, #8]
}
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000af8:	b29b      	uxth	r3, r3
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b085      	sub	sp, #20
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	460b      	mov	r3, r1
 8000b12:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000b14:	2300      	movs	r3, #0
 8000b16:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681a      	ldr	r2, [r3, #0]
 8000b1c:	887b      	ldrh	r3, [r7, #2]
 8000b1e:	4013      	ands	r3, r2
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d002      	beq.n	8000b2a <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8000b24:	2301      	movs	r3, #1
 8000b26:	73fb      	strb	r3, [r7, #15]
 8000b28:	e001      	b.n	8000b2e <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8000b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3714      	adds	r7, #20
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <__libc_init_array>:
 8000b3c:	b570      	push	{r4, r5, r6, lr}
 8000b3e:	4b0e      	ldr	r3, [pc, #56]	; (8000b78 <__libc_init_array+0x3c>)
 8000b40:	4d0e      	ldr	r5, [pc, #56]	; (8000b7c <__libc_init_array+0x40>)
 8000b42:	2400      	movs	r4, #0
 8000b44:	1aed      	subs	r5, r5, r3
 8000b46:	10ad      	asrs	r5, r5, #2
 8000b48:	461e      	mov	r6, r3
 8000b4a:	42ac      	cmp	r4, r5
 8000b4c:	d004      	beq.n	8000b58 <__libc_init_array+0x1c>
 8000b4e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000b52:	4790      	blx	r2
 8000b54:	3401      	adds	r4, #1
 8000b56:	e7f8      	b.n	8000b4a <__libc_init_array+0xe>
 8000b58:	f000 f816 	bl	8000b88 <_init>
 8000b5c:	4d08      	ldr	r5, [pc, #32]	; (8000b80 <__libc_init_array+0x44>)
 8000b5e:	4b09      	ldr	r3, [pc, #36]	; (8000b84 <__libc_init_array+0x48>)
 8000b60:	2400      	movs	r4, #0
 8000b62:	1aed      	subs	r5, r5, r3
 8000b64:	10ad      	asrs	r5, r5, #2
 8000b66:	461e      	mov	r6, r3
 8000b68:	42ac      	cmp	r4, r5
 8000b6a:	d004      	beq.n	8000b76 <__libc_init_array+0x3a>
 8000b6c:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8000b70:	4790      	blx	r2
 8000b72:	3401      	adds	r4, #1
 8000b74:	e7f8      	b.n	8000b68 <__libc_init_array+0x2c>
 8000b76:	bd70      	pop	{r4, r5, r6, pc}
 8000b78:	08000ba0 	.word	0x08000ba0
 8000b7c:	08000ba0 	.word	0x08000ba0
 8000b80:	08000ba4 	.word	0x08000ba4
 8000b84:	08000ba0 	.word	0x08000ba0

08000b88 <_init>:
 8000b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b8a:	bf00      	nop
 8000b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b8e:	bc08      	pop	{r3}
 8000b90:	469e      	mov	lr, r3
 8000b92:	4770      	bx	lr

08000b94 <_fini>:
 8000b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b96:	bf00      	nop
 8000b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b9a:	bc08      	pop	{r3}
 8000b9c:	469e      	mov	lr, r3
 8000b9e:	4770      	bx	lr
