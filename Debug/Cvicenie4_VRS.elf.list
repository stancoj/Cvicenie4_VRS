
Cvicenie4_VRS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00008000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f68  0800013c  0800013c  0000813c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  080010a4  080010a4  000090a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  080010a8  080010a8  000090a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000001c  20000000  080010ac  00010000  2**2
                  ALLOC
  5 ._user_heap_stack 00000400  2000001c  080010ac  0001001c  2**0
                  ALLOC
  6 .ARM.attributes 00000029  00000000  00000000  000090ac  2**0
                  CONTENTS, READONLY
  7 .debug_info   000029fc  00000000  00000000  000090d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000850  00000000  00000000  0000bad1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000410  00000000  00000000  0000c328  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000003a8  00000000  00000000  0000c738  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000014ef  00000000  00000000  0000cae0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00001278  00000000  00000000  0000dfcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .comment      00000082  00000000  00000000  0000f247  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000c2c  00000000  00000000  0000f2cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000000 	.word	0x20000000
 8000158:	00000000 	.word	0x00000000
 800015c:	0800108c 	.word	0x0800108c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	0800108c 	.word	0x0800108c
 8000178:	20000004 	.word	0x20000004

0800017c <__aeabi_frsub>:
 800017c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000180:	e002      	b.n	8000188 <__addsf3>
 8000182:	bf00      	nop

08000184 <__aeabi_fsub>:
 8000184:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000188 <__addsf3>:
 8000188:	0042      	lsls	r2, r0, #1
 800018a:	bf1f      	itttt	ne
 800018c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000190:	ea92 0f03 	teqne	r2, r3
 8000194:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000198:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800019c:	d06a      	beq.n	8000274 <__addsf3+0xec>
 800019e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80001a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80001a6:	bfc1      	itttt	gt
 80001a8:	18d2      	addgt	r2, r2, r3
 80001aa:	4041      	eorgt	r1, r0
 80001ac:	4048      	eorgt	r0, r1
 80001ae:	4041      	eorgt	r1, r0
 80001b0:	bfb8      	it	lt
 80001b2:	425b      	neglt	r3, r3
 80001b4:	2b19      	cmp	r3, #25
 80001b6:	bf88      	it	hi
 80001b8:	4770      	bxhi	lr
 80001ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80001be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80001c6:	bf18      	it	ne
 80001c8:	4240      	negne	r0, r0
 80001ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001d6:	bf18      	it	ne
 80001d8:	4249      	negne	r1, r1
 80001da:	ea92 0f03 	teq	r2, r3
 80001de:	d03f      	beq.n	8000260 <__addsf3+0xd8>
 80001e0:	f1a2 0201 	sub.w	r2, r2, #1
 80001e4:	fa41 fc03 	asr.w	ip, r1, r3
 80001e8:	eb10 000c 	adds.w	r0, r0, ip
 80001ec:	f1c3 0320 	rsb	r3, r3, #32
 80001f0:	fa01 f103 	lsl.w	r1, r1, r3
 80001f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001f8:	d502      	bpl.n	8000200 <__addsf3+0x78>
 80001fa:	4249      	negs	r1, r1
 80001fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000200:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000204:	d313      	bcc.n	800022e <__addsf3+0xa6>
 8000206:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800020a:	d306      	bcc.n	800021a <__addsf3+0x92>
 800020c:	0840      	lsrs	r0, r0, #1
 800020e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000212:	f102 0201 	add.w	r2, r2, #1
 8000216:	2afe      	cmp	r2, #254	; 0xfe
 8000218:	d251      	bcs.n	80002be <__addsf3+0x136>
 800021a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 800021e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000222:	bf08      	it	eq
 8000224:	f020 0001 	biceq.w	r0, r0, #1
 8000228:	ea40 0003 	orr.w	r0, r0, r3
 800022c:	4770      	bx	lr
 800022e:	0049      	lsls	r1, r1, #1
 8000230:	eb40 0000 	adc.w	r0, r0, r0
 8000234:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8000238:	f1a2 0201 	sub.w	r2, r2, #1
 800023c:	d1ed      	bne.n	800021a <__addsf3+0x92>
 800023e:	fab0 fc80 	clz	ip, r0
 8000242:	f1ac 0c08 	sub.w	ip, ip, #8
 8000246:	ebb2 020c 	subs.w	r2, r2, ip
 800024a:	fa00 f00c 	lsl.w	r0, r0, ip
 800024e:	bfaa      	itet	ge
 8000250:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000254:	4252      	neglt	r2, r2
 8000256:	4318      	orrge	r0, r3
 8000258:	bfbc      	itt	lt
 800025a:	40d0      	lsrlt	r0, r2
 800025c:	4318      	orrlt	r0, r3
 800025e:	4770      	bx	lr
 8000260:	f092 0f00 	teq	r2, #0
 8000264:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000268:	bf06      	itte	eq
 800026a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800026e:	3201      	addeq	r2, #1
 8000270:	3b01      	subne	r3, #1
 8000272:	e7b5      	b.n	80001e0 <__addsf3+0x58>
 8000274:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000278:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800027c:	bf18      	it	ne
 800027e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000282:	d021      	beq.n	80002c8 <__addsf3+0x140>
 8000284:	ea92 0f03 	teq	r2, r3
 8000288:	d004      	beq.n	8000294 <__addsf3+0x10c>
 800028a:	f092 0f00 	teq	r2, #0
 800028e:	bf08      	it	eq
 8000290:	4608      	moveq	r0, r1
 8000292:	4770      	bx	lr
 8000294:	ea90 0f01 	teq	r0, r1
 8000298:	bf1c      	itt	ne
 800029a:	2000      	movne	r0, #0
 800029c:	4770      	bxne	lr
 800029e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80002a2:	d104      	bne.n	80002ae <__addsf3+0x126>
 80002a4:	0040      	lsls	r0, r0, #1
 80002a6:	bf28      	it	cs
 80002a8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80002ac:	4770      	bx	lr
 80002ae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80002b2:	bf3c      	itt	cc
 80002b4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80002b8:	4770      	bxcc	lr
 80002ba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80002be:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80002c2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002c6:	4770      	bx	lr
 80002c8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002cc:	bf16      	itet	ne
 80002ce:	4608      	movne	r0, r1
 80002d0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002d4:	4601      	movne	r1, r0
 80002d6:	0242      	lsls	r2, r0, #9
 80002d8:	bf06      	itte	eq
 80002da:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002de:	ea90 0f01 	teqeq	r0, r1
 80002e2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002e6:	4770      	bx	lr

080002e8 <__aeabi_ui2f>:
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e004      	b.n	80002f8 <__aeabi_i2f+0x8>
 80002ee:	bf00      	nop

080002f0 <__aeabi_i2f>:
 80002f0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002f4:	bf48      	it	mi
 80002f6:	4240      	negmi	r0, r0
 80002f8:	ea5f 0c00 	movs.w	ip, r0
 80002fc:	bf08      	it	eq
 80002fe:	4770      	bxeq	lr
 8000300:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000304:	4601      	mov	r1, r0
 8000306:	f04f 0000 	mov.w	r0, #0
 800030a:	e01c      	b.n	8000346 <__aeabi_l2f+0x2a>

0800030c <__aeabi_ul2f>:
 800030c:	ea50 0201 	orrs.w	r2, r0, r1
 8000310:	bf08      	it	eq
 8000312:	4770      	bxeq	lr
 8000314:	f04f 0300 	mov.w	r3, #0
 8000318:	e00a      	b.n	8000330 <__aeabi_l2f+0x14>
 800031a:	bf00      	nop

0800031c <__aeabi_l2f>:
 800031c:	ea50 0201 	orrs.w	r2, r0, r1
 8000320:	bf08      	it	eq
 8000322:	4770      	bxeq	lr
 8000324:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000328:	d502      	bpl.n	8000330 <__aeabi_l2f+0x14>
 800032a:	4240      	negs	r0, r0
 800032c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000330:	ea5f 0c01 	movs.w	ip, r1
 8000334:	bf02      	ittt	eq
 8000336:	4684      	moveq	ip, r0
 8000338:	4601      	moveq	r1, r0
 800033a:	2000      	moveq	r0, #0
 800033c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000340:	bf08      	it	eq
 8000342:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000346:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800034a:	fabc f28c 	clz	r2, ip
 800034e:	3a08      	subs	r2, #8
 8000350:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000354:	db10      	blt.n	8000378 <__aeabi_l2f+0x5c>
 8000356:	fa01 fc02 	lsl.w	ip, r1, r2
 800035a:	4463      	add	r3, ip
 800035c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000360:	f1c2 0220 	rsb	r2, r2, #32
 8000364:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000368:	fa20 f202 	lsr.w	r2, r0, r2
 800036c:	eb43 0002 	adc.w	r0, r3, r2
 8000370:	bf08      	it	eq
 8000372:	f020 0001 	biceq.w	r0, r0, #1
 8000376:	4770      	bx	lr
 8000378:	f102 0220 	add.w	r2, r2, #32
 800037c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000380:	f1c2 0220 	rsb	r2, r2, #32
 8000384:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000388:	fa21 f202 	lsr.w	r2, r1, r2
 800038c:	eb43 0002 	adc.w	r0, r3, r2
 8000390:	bf08      	it	eq
 8000392:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000396:	4770      	bx	lr

08000398 <__gesf2>:
 8000398:	f04f 3cff 	mov.w	ip, #4294967295
 800039c:	e006      	b.n	80003ac <__cmpsf2+0x4>
 800039e:	bf00      	nop

080003a0 <__lesf2>:
 80003a0:	f04f 0c01 	mov.w	ip, #1
 80003a4:	e002      	b.n	80003ac <__cmpsf2+0x4>
 80003a6:	bf00      	nop

080003a8 <__cmpsf2>:
 80003a8:	f04f 0c01 	mov.w	ip, #1
 80003ac:	f84d cd04 	str.w	ip, [sp, #-4]!
 80003b0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80003b4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003bc:	bf18      	it	ne
 80003be:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003c2:	d011      	beq.n	80003e8 <__cmpsf2+0x40>
 80003c4:	b001      	add	sp, #4
 80003c6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 80003ca:	bf18      	it	ne
 80003cc:	ea90 0f01 	teqne	r0, r1
 80003d0:	bf58      	it	pl
 80003d2:	ebb2 0003 	subspl.w	r0, r2, r3
 80003d6:	bf88      	it	hi
 80003d8:	17c8      	asrhi	r0, r1, #31
 80003da:	bf38      	it	cc
 80003dc:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 80003e0:	bf18      	it	ne
 80003e2:	f040 0001 	orrne.w	r0, r0, #1
 80003e6:	4770      	bx	lr
 80003e8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003ec:	d102      	bne.n	80003f4 <__cmpsf2+0x4c>
 80003ee:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80003f2:	d105      	bne.n	8000400 <__cmpsf2+0x58>
 80003f4:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80003f8:	d1e4      	bne.n	80003c4 <__cmpsf2+0x1c>
 80003fa:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80003fe:	d0e1      	beq.n	80003c4 <__cmpsf2+0x1c>
 8000400:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000404:	4770      	bx	lr
 8000406:	bf00      	nop

08000408 <__aeabi_cfrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	4608      	mov	r0, r1
 800040c:	4661      	mov	r1, ip
 800040e:	e7ff      	b.n	8000410 <__aeabi_cfcmpeq>

08000410 <__aeabi_cfcmpeq>:
 8000410:	b50f      	push	{r0, r1, r2, r3, lr}
 8000412:	f7ff ffc9 	bl	80003a8 <__cmpsf2>
 8000416:	2800      	cmp	r0, #0
 8000418:	bf48      	it	mi
 800041a:	f110 0f00 	cmnmi.w	r0, #0
 800041e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000420 <__aeabi_fcmpeq>:
 8000420:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000424:	f7ff fff4 	bl	8000410 <__aeabi_cfcmpeq>
 8000428:	bf0c      	ite	eq
 800042a:	2001      	moveq	r0, #1
 800042c:	2000      	movne	r0, #0
 800042e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000432:	bf00      	nop

08000434 <__aeabi_fcmplt>:
 8000434:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000438:	f7ff ffea 	bl	8000410 <__aeabi_cfcmpeq>
 800043c:	bf34      	ite	cc
 800043e:	2001      	movcc	r0, #1
 8000440:	2000      	movcs	r0, #0
 8000442:	f85d fb08 	ldr.w	pc, [sp], #8
 8000446:	bf00      	nop

08000448 <__aeabi_fcmple>:
 8000448:	f84d ed08 	str.w	lr, [sp, #-8]!
 800044c:	f7ff ffe0 	bl	8000410 <__aeabi_cfcmpeq>
 8000450:	bf94      	ite	ls
 8000452:	2001      	movls	r0, #1
 8000454:	2000      	movhi	r0, #0
 8000456:	f85d fb08 	ldr.w	pc, [sp], #8
 800045a:	bf00      	nop

0800045c <__aeabi_fcmpge>:
 800045c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000460:	f7ff ffd2 	bl	8000408 <__aeabi_cfrcmple>
 8000464:	bf94      	ite	ls
 8000466:	2001      	movls	r0, #1
 8000468:	2000      	movhi	r0, #0
 800046a:	f85d fb08 	ldr.w	pc, [sp], #8
 800046e:	bf00      	nop

08000470 <__aeabi_fcmpgt>:
 8000470:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000474:	f7ff ffc8 	bl	8000408 <__aeabi_cfrcmple>
 8000478:	bf34      	ite	cc
 800047a:	2001      	movcc	r0, #1
 800047c:	2000      	movcs	r0, #0
 800047e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000482:	bf00      	nop

08000484 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000484:	b580      	push	{r7, lr}
 8000486:	af00      	add	r7, sp, #0
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 8000488:	4b14      	ldr	r3, [pc, #80]	; (80004dc <SystemInit+0x58>)
 800048a:	4a14      	ldr	r2, [pc, #80]	; (80004dc <SystemInit+0x58>)
 800048c:	6812      	ldr	r2, [r2, #0]
 800048e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000492:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 8000494:	4a11      	ldr	r2, [pc, #68]	; (80004dc <SystemInit+0x58>)
 8000496:	4b11      	ldr	r3, [pc, #68]	; (80004dc <SystemInit+0x58>)
 8000498:	6899      	ldr	r1, [r3, #8]
 800049a:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <SystemInit+0x5c>)
 800049c:	400b      	ands	r3, r1
 800049e:	6093      	str	r3, [r2, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80004a0:	4a0e      	ldr	r2, [pc, #56]	; (80004dc <SystemInit+0x58>)
 80004a2:	4b0e      	ldr	r3, [pc, #56]	; (80004dc <SystemInit+0x58>)
 80004a4:	681b      	ldr	r3, [r3, #0]
 80004a6:	f023 5388 	bic.w	r3, r3, #285212672	; 0x11000000
 80004aa:	f023 1301 	bic.w	r3, r3, #65537	; 0x10001
 80004ae:	6013      	str	r3, [r2, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80004b0:	4b0a      	ldr	r3, [pc, #40]	; (80004dc <SystemInit+0x58>)
 80004b2:	4a0a      	ldr	r2, [pc, #40]	; (80004dc <SystemInit+0x58>)
 80004b4:	6812      	ldr	r2, [r2, #0]
 80004b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80004ba:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80004bc:	4b07      	ldr	r3, [pc, #28]	; (80004dc <SystemInit+0x58>)
 80004be:	4a07      	ldr	r2, [pc, #28]	; (80004dc <SystemInit+0x58>)
 80004c0:	6892      	ldr	r2, [r2, #8]
 80004c2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80004c6:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80004c8:	4b04      	ldr	r3, [pc, #16]	; (80004dc <SystemInit+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	60da      	str	r2, [r3, #12]
#ifdef DATA_IN_ExtSRAM
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
    
  /* Configure the System clock frequency, AHB/APBx prescalers and Flash settings */
  SetSysClock();
 80004ce:	f000 f80b 	bl	80004e8 <SetSysClock>

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80004d2:	4b04      	ldr	r3, [pc, #16]	; (80004e4 <SystemInit+0x60>)
 80004d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004d8:	609a      	str	r2, [r3, #8]
#endif
}
 80004da:	bd80      	pop	{r7, pc}
 80004dc:	40023800 	.word	0x40023800
 80004e0:	88ffc00c 	.word	0x88ffc00c
 80004e4:	e000ed00 	.word	0xe000ed00

080004e8 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 80004ee:	2300      	movs	r3, #0
 80004f0:	607b      	str	r3, [r7, #4]
 80004f2:	2300      	movs	r3, #0
 80004f4:	603b      	str	r3, [r7, #0]
  
  /* SYSCLK, HCLK, PCLK2 and PCLK1 configuration ---------------------------*/
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 80004f6:	4b41      	ldr	r3, [pc, #260]	; (80005fc <SetSysClock+0x114>)
 80004f8:	4a40      	ldr	r2, [pc, #256]	; (80005fc <SetSysClock+0x114>)
 80004fa:	6812      	ldr	r2, [r2, #0]
 80004fc:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8000500:	601a      	str	r2, [r3, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 8000502:	4b3e      	ldr	r3, [pc, #248]	; (80005fc <SetSysClock+0x114>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800050a:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	3301      	adds	r3, #1
 8000510:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 8000512:	683b      	ldr	r3, [r7, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d103      	bne.n	8000520 <SetSysClock+0x38>
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800051e:	d1f0      	bne.n	8000502 <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8000520:	4b36      	ldr	r3, [pc, #216]	; (80005fc <SetSysClock+0x114>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 800052c:	2301      	movs	r3, #1
 800052e:	603b      	str	r3, [r7, #0]
 8000530:	e001      	b.n	8000536 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 8000532:	2300      	movs	r3, #0
 8000534:	603b      	str	r3, [r7, #0]
  }
  
  if (HSEStatus == (uint32_t)0x01)
 8000536:	683b      	ldr	r3, [r7, #0]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d15a      	bne.n	80005f2 <SetSysClock+0x10a>
  {
    /* Enable 64-bit access */
    FLASH->ACR |= FLASH_ACR_ACC64;
 800053c:	4b30      	ldr	r3, [pc, #192]	; (8000600 <SetSysClock+0x118>)
 800053e:	4a30      	ldr	r2, [pc, #192]	; (8000600 <SetSysClock+0x118>)
 8000540:	6812      	ldr	r2, [r2, #0]
 8000542:	f042 0204 	orr.w	r2, r2, #4
 8000546:	601a      	str	r2, [r3, #0]
    
    /* Enable Prefetch Buffer */
    FLASH->ACR |= FLASH_ACR_PRFTEN;
 8000548:	4b2d      	ldr	r3, [pc, #180]	; (8000600 <SetSysClock+0x118>)
 800054a:	4a2d      	ldr	r2, [pc, #180]	; (8000600 <SetSysClock+0x118>)
 800054c:	6812      	ldr	r2, [r2, #0]
 800054e:	f042 0202 	orr.w	r2, r2, #2
 8000552:	601a      	str	r2, [r3, #0]

    /* Flash 1 wait state */
    FLASH->ACR |= FLASH_ACR_LATENCY;
 8000554:	4b2a      	ldr	r3, [pc, #168]	; (8000600 <SetSysClock+0x118>)
 8000556:	4a2a      	ldr	r2, [pc, #168]	; (8000600 <SetSysClock+0x118>)
 8000558:	6812      	ldr	r2, [r2, #0]
 800055a:	f042 0201 	orr.w	r2, r2, #1
 800055e:	601a      	str	r2, [r3, #0]
    
    /* Power enable */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8000560:	4b26      	ldr	r3, [pc, #152]	; (80005fc <SetSysClock+0x114>)
 8000562:	4a26      	ldr	r2, [pc, #152]	; (80005fc <SetSysClock+0x114>)
 8000564:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8000566:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800056a:	625a      	str	r2, [r3, #36]	; 0x24
  
    /* Select the Voltage Range 1 (1.8 V) */
    PWR->CR = PWR_CR_VOS_0;
 800056c:	4b25      	ldr	r3, [pc, #148]	; (8000604 <SetSysClock+0x11c>)
 800056e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000572:	601a      	str	r2, [r3, #0]
  
    /* Wait Until the Voltage Regulator is ready */
    while((PWR->CSR & PWR_CSR_VOSF) != RESET)
 8000574:	bf00      	nop
 8000576:	4b23      	ldr	r3, [pc, #140]	; (8000604 <SetSysClock+0x11c>)
 8000578:	685b      	ldr	r3, [r3, #4]
 800057a:	f003 0310 	and.w	r3, r3, #16
 800057e:	2b00      	cmp	r3, #0
 8000580:	d1f9      	bne.n	8000576 <SetSysClock+0x8e>
    {
    }
        
    /* HCLK = SYSCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_HPRE_DIV1;
 8000582:	4b1e      	ldr	r3, [pc, #120]	; (80005fc <SetSysClock+0x114>)
 8000584:	4a1d      	ldr	r2, [pc, #116]	; (80005fc <SetSysClock+0x114>)
 8000586:	6892      	ldr	r2, [r2, #8]
 8000588:	609a      	str	r2, [r3, #8]
  
    /* PCLK2 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE2_DIV1;
 800058a:	4b1c      	ldr	r3, [pc, #112]	; (80005fc <SetSysClock+0x114>)
 800058c:	4a1b      	ldr	r2, [pc, #108]	; (80005fc <SetSysClock+0x114>)
 800058e:	6892      	ldr	r2, [r2, #8]
 8000590:	609a      	str	r2, [r3, #8]
    
    /* PCLK1 = HCLK /1*/
    RCC->CFGR |= (uint32_t)RCC_CFGR_PPRE1_DIV1;
 8000592:	4b1a      	ldr	r3, [pc, #104]	; (80005fc <SetSysClock+0x114>)
 8000594:	4a19      	ldr	r2, [pc, #100]	; (80005fc <SetSysClock+0x114>)
 8000596:	6892      	ldr	r2, [r2, #8]
 8000598:	609a      	str	r2, [r3, #8]
    
    /*  PLL configuration */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL |
 800059a:	4b18      	ldr	r3, [pc, #96]	; (80005fc <SetSysClock+0x114>)
 800059c:	4a17      	ldr	r2, [pc, #92]	; (80005fc <SetSysClock+0x114>)
 800059e:	6892      	ldr	r2, [r2, #8]
 80005a0:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80005a4:	609a      	str	r2, [r3, #8]
                                        RCC_CFGR_PLLDIV));
    RCC->CFGR |= (uint32_t)(RCC_CFGR_PLLSRC_HSE | RCC_CFGR_PLLMUL12 | RCC_CFGR_PLLDIV3);
 80005a6:	4b15      	ldr	r3, [pc, #84]	; (80005fc <SetSysClock+0x114>)
 80005a8:	4a14      	ldr	r2, [pc, #80]	; (80005fc <SetSysClock+0x114>)
 80005aa:	6892      	ldr	r2, [r2, #8]
 80005ac:	f442 0211 	orr.w	r2, r2, #9502720	; 0x910000
 80005b0:	609a      	str	r2, [r3, #8]

    /* Enable PLL */
    RCC->CR |= RCC_CR_PLLON;
 80005b2:	4b12      	ldr	r3, [pc, #72]	; (80005fc <SetSysClock+0x114>)
 80005b4:	4a11      	ldr	r2, [pc, #68]	; (80005fc <SetSysClock+0x114>)
 80005b6:	6812      	ldr	r2, [r2, #0]
 80005b8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 80005bc:	601a      	str	r2, [r3, #0]

    /* Wait till PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80005be:	bf00      	nop
 80005c0:	4b0e      	ldr	r3, [pc, #56]	; (80005fc <SetSysClock+0x114>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f9      	beq.n	80005c0 <SetSysClock+0xd8>
    {
    }
        
    /* Select PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 80005cc:	4b0b      	ldr	r3, [pc, #44]	; (80005fc <SetSysClock+0x114>)
 80005ce:	4a0b      	ldr	r2, [pc, #44]	; (80005fc <SetSysClock+0x114>)
 80005d0:	6892      	ldr	r2, [r2, #8]
 80005d2:	f022 0203 	bic.w	r2, r2, #3
 80005d6:	609a      	str	r2, [r3, #8]
    RCC->CFGR |= (uint32_t)RCC_CFGR_SW_PLL;
 80005d8:	4b08      	ldr	r3, [pc, #32]	; (80005fc <SetSysClock+0x114>)
 80005da:	4a08      	ldr	r2, [pc, #32]	; (80005fc <SetSysClock+0x114>)
 80005dc:	6892      	ldr	r2, [r2, #8]
 80005de:	f042 0203 	orr.w	r2, r2, #3
 80005e2:	609a      	str	r2, [r3, #8]

    /* Wait till PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS) != (uint32_t)RCC_CFGR_SWS_PLL)
 80005e4:	bf00      	nop
 80005e6:	4b05      	ldr	r3, [pc, #20]	; (80005fc <SetSysClock+0x114>)
 80005e8:	689b      	ldr	r3, [r3, #8]
 80005ea:	f003 030c 	and.w	r3, r3, #12
 80005ee:	2b0c      	cmp	r3, #12
 80005f0:	d1f9      	bne.n	80005e6 <SetSysClock+0xfe>
  else
  {
    /* If HSE fails to start-up, the application will have wrong clock
       configuration. User can add here some code to deal with this error */
  }
}
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	40023800 	.word	0x40023800
 8000600:	40023c00 	.word	0x40023c00
 8000604:	40007000 	.word	0x40007000

08000608 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000608:	b480      	push	{r7}
 800060a:	af00      	add	r7, sp, #0
}
 800060c:	46bd      	mov	sp, r7
 800060e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000612:	4770      	bx	lr

08000614 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
  {
  }
 8000618:	e7fe      	b.n	8000618 <HardFault_Handler+0x4>
 800061a:	bf00      	nop

0800061c <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
  {
  }
 8000620:	e7fe      	b.n	8000620 <MemManage_Handler+0x4>
 8000622:	bf00      	nop

08000624 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
  {
  }
 8000628:	e7fe      	b.n	8000628 <BusFault_Handler+0x4>
 800062a:	bf00      	nop

0800062c <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
  {
  }
 8000630:	e7fe      	b.n	8000630 <UsageFault_Handler+0x4>
 8000632:	bf00      	nop

08000634 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
}
 8000638:	46bd      	mov	sp, r7
 800063a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800063e:	4770      	bx	lr

08000640 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000640:	b480      	push	{r7}
 8000642:	af00      	add	r7, sp, #0
}
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
}
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr

08000658 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000658:	b480      	push	{r7}
 800065a:	af00      	add	r7, sp, #0
	/*  TimingDelay_Decrement(); */
#ifdef USE_STM32L_DISCOVERY
  TimingDelay_Decrement();
#endif
}
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr

08000664 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000664:	f8df d03c 	ldr.w	sp, [pc, #60]	; 80006a4 <LoopFillZerobss+0x16>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000668:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800066a:	f000 b804 	b.w	8000676 <LoopCopyDataInit>

0800066e <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800066e:	4b0e      	ldr	r3, [pc, #56]	; (80006a8 <LoopFillZerobss+0x1a>)
  ldr r3, [r3, r1]
 8000670:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000672:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000674:	3104      	adds	r1, #4

08000676 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <LoopFillZerobss+0x1e>)
  ldr r3, =_edata
 8000678:	4b0d      	ldr	r3, [pc, #52]	; (80006b0 <LoopFillZerobss+0x22>)
  adds r2, r0, r1
 800067a:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800067c:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800067e:	f4ff aff6 	bcc.w	800066e <CopyDataInit>
  ldr r2, =_sbss
 8000682:	4a0c      	ldr	r2, [pc, #48]	; (80006b4 <LoopFillZerobss+0x26>)
  b LoopFillZerobss
 8000684:	f000 b803 	b.w	800068e <LoopFillZerobss>

08000688 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000688:	2300      	movs	r3, #0
  str r3, [r2], #4
 800068a:	f842 3b04 	str.w	r3, [r2], #4

0800068e <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800068e:	4b0a      	ldr	r3, [pc, #40]	; (80006b8 <LoopFillZerobss+0x2a>)
  cmp r2, r3
 8000690:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000692:	f4ff aff9 	bcc.w	8000688 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000696:	f7ff fef5 	bl	8000484 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800069a:	f000 fcd1 	bl	8001040 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800069e:	f000 f87b 	bl	8000798 <main>
  bx lr
 80006a2:	4770      	bx	lr

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80006a4:	20014000 	.word	0x20014000
/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
  b LoopCopyDataInit

CopyDataInit:
  ldr r3, =_sidata
 80006a8:	080010ac 	.word	0x080010ac
  ldr r3, [r3, r1]
  str r3, [r0, r1]
  adds r1, r1, #4

LoopCopyDataInit:
  ldr r0, =_sdata
 80006ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80006b0:	20000000 	.word	0x20000000
  adds r2, r0, r1
  cmp r2, r3
  bcc CopyDataInit
  ldr r2, =_sbss
 80006b4:	20000000 	.word	0x20000000
FillZerobss:
  movs r3, #0
  str r3, [r2], #4

LoopFillZerobss:
  ldr r3, = _ebss
 80006b8:	2000001c 	.word	0x2000001c

080006bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006bc:	f7ff bffe 	b.w	80006bc <ADC1_IRQHandler>

080006c0 <LED_init>:
#include <stddef.h>
#include "stm32l1xx.h"


void LED_init()
{
 80006c0:	b580      	push	{r7, lr}
 80006c2:	b082      	sub	sp, #8
 80006c4:	af00      	add	r7, sp, #0
	  RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA,ENABLE);
 80006c6:	2001      	movs	r0, #1
 80006c8:	2101      	movs	r1, #1
 80006ca:	f000 f971 	bl	80009b0 <RCC_AHBPeriphClockCmd>
	  GPIO_InitTypeDef GPIO_Init_LED;

	  GPIO_Init_LED.GPIO_Mode = GPIO_Mode_OUT;
 80006ce:	2301      	movs	r3, #1
 80006d0:	713b      	strb	r3, [r7, #4]
	  GPIO_Init_LED.GPIO_OType = GPIO_OType_PP;
 80006d2:	2300      	movs	r3, #0
 80006d4:	71bb      	strb	r3, [r7, #6]
	  GPIO_Init_LED.GPIO_Pin = GPIO_Pin_5;
 80006d6:	2320      	movs	r3, #32
 80006d8:	603b      	str	r3, [r7, #0]
	  GPIO_Init_LED.GPIO_Speed = GPIO_Speed_40MHz;
 80006da:	2303      	movs	r3, #3
 80006dc:	717b      	strb	r3, [r7, #5]

	  GPIO_Init(GPIOA,&GPIO_Init_LED);
 80006de:	463b      	mov	r3, r7
 80006e0:	4803      	ldr	r0, [pc, #12]	; (80006f0 <LED_init+0x30>)
 80006e2:	4619      	mov	r1, r3
 80006e4:	f000 f9d4 	bl	8000a90 <GPIO_Init>
}
 80006e8:	3708      	adds	r7, #8
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	40020000 	.word	0x40020000

080006f4 <adc_init>:

void adc_init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStructure;
	ADC_InitTypeDef ADC_InitStructure;
	/* Enable GPIO clock */
	RCC_AHBPeriphClockCmd(RCC_AHBPeriph_GPIOA, ENABLE);
 80006fa:	2001      	movs	r0, #1
 80006fc:	2101      	movs	r1, #1
 80006fe:	f000 f957 	bl	80009b0 <RCC_AHBPeriphClockCmd>

	/* Configure ADCx Channel 2 as analog input */
	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1 ;
 8000702:	2302      	movs	r3, #2
 8000704:	61bb      	str	r3, [r7, #24]
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AN;
 8000706:	2303      	movs	r3, #3
 8000708:	773b      	strb	r3, [r7, #28]
	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL ;
 800070a:	2300      	movs	r3, #0
 800070c:	77fb      	strb	r3, [r7, #31]
	GPIO_Init(GPIOA, &GPIO_InitStructure);
 800070e:	f107 0318 	add.w	r3, r7, #24
 8000712:	481f      	ldr	r0, [pc, #124]	; (8000790 <adc_init+0x9c>)
 8000714:	4619      	mov	r1, r3
 8000716:	f000 f9bb 	bl	8000a90 <GPIO_Init>

	/* Enable the HSI oscillator */
	RCC_HSICmd(ENABLE);
 800071a:	2001      	movs	r0, #1
 800071c:	f000 f938 	bl	8000990 <RCC_HSICmd>
	while(RCC_GetFlagStatus(RCC_FLAG_HSIRDY) == RESET);
 8000720:	bf00      	nop
 8000722:	2021      	movs	r0, #33	; 0x21
 8000724:	f000 f980 	bl	8000a28 <RCC_GetFlagStatus>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d0f9      	beq.n	8000722 <adc_init+0x2e>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE);
 800072e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000732:	2101      	movs	r1, #1
 8000734:	f000 f95a 	bl	80009ec <RCC_APB2PeriphClockCmd>

	/* Initialize ADC structure */
	ADC_StructInit(&ADC_InitStructure);
 8000738:	463b      	mov	r3, r7
 800073a:	4618      	mov	r0, r3
 800073c:	f000 faac 	bl	8000c98 <ADC_StructInit>

	/* ADC1 configuration */
	ADC_InitStructure.ADC_Resolution = ADC_Resolution_12b;
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
	ADC_InitStructure.ADC_ContinuousConvMode = DISABLE;
 8000744:	2300      	movs	r3, #0
 8000746:	717b      	strb	r3, [r7, #5]
	ADC_InitStructure.ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
	ADC_InitStructure.ADC_DataAlign = ADC_DataAlign_Right;
 800074c:	2300      	movs	r3, #0
 800074e:	613b      	str	r3, [r7, #16]
	ADC_InitStructure.ADC_NbrOfConversion = 1;
 8000750:	2301      	movs	r3, #1
 8000752:	753b      	strb	r3, [r7, #20]
	ADC_Init(ADC1, &ADC_InitStructure);
 8000754:	463b      	mov	r3, r7
 8000756:	480f      	ldr	r0, [pc, #60]	; (8000794 <adc_init+0xa0>)
 8000758:	4619      	mov	r1, r3
 800075a:	f000 fa49 	bl	8000bf0 <ADC_Init>
	/* ADCx regular channel8 configuration */
	ADC_RegularChannelConfig(ADC1, ADC_Channel_1, 1, ADC_SampleTime_16Cycles);
 800075e:	480d      	ldr	r0, [pc, #52]	; (8000794 <adc_init+0xa0>)
 8000760:	2101      	movs	r1, #1
 8000762:	2201      	movs	r2, #1
 8000764:	2302      	movs	r3, #2
 8000766:	f000 fad3 	bl	8000d10 <ADC_RegularChannelConfig>
	/* Enable the ADC */
	ADC_Cmd(ADC1, ENABLE);
 800076a:	480a      	ldr	r0, [pc, #40]	; (8000794 <adc_init+0xa0>)
 800076c:	2101      	movs	r1, #1
 800076e:	f000 fab3 	bl	8000cd8 <ADC_Cmd>
	/* Wait until the ADC1 is ready */
	while(ADC_GetFlagStatus(ADC1, ADC_FLAG_ADONS) == RESET){}
 8000772:	bf00      	nop
 8000774:	4807      	ldr	r0, [pc, #28]	; (8000794 <adc_init+0xa0>)
 8000776:	2140      	movs	r1, #64	; 0x40
 8000778:	f000 fc48 	bl	800100c <ADC_GetFlagStatus>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0f8      	beq.n	8000774 <adc_init+0x80>
	/* Start ADC Software Conversion */
	ADC_SoftwareStartConv(ADC1);
 8000782:	4804      	ldr	r0, [pc, #16]	; (8000794 <adc_init+0xa0>)
 8000784:	f000 fc24 	bl	8000fd0 <ADC_SoftwareStartConv>
}
 8000788:	3720      	adds	r7, #32
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	40020000 	.word	0x40020000
 8000794:	40012400 	.word	0x40012400

08000798 <main>:

int main(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
	float i;
	adc_init();
 800079e:	f7ff ffa9 	bl	80006f4 <adc_init>
	LED_init();
 80007a2:	f7ff ff8d 	bl	80006c0 <LED_init>
	uint16_t AD_value;


  while (1)
  {
	  	ADC_SoftwareStartConv(ADC1);
 80007a6:	4874      	ldr	r0, [pc, #464]	; (8000978 <main+0x1e0>)
 80007a8:	f000 fc12 	bl	8000fd0 <ADC_SoftwareStartConv>
	   //wait for conversion complete

	  	while(!ADC_GetFlagStatus(ADC1, ADC_FLAG_EOC)){}
 80007ac:	bf00      	nop
 80007ae:	4872      	ldr	r0, [pc, #456]	; (8000978 <main+0x1e0>)
 80007b0:	2102      	movs	r1, #2
 80007b2:	f000 fc2b 	bl	800100c <ADC_GetFlagStatus>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d0f8      	beq.n	80007ae <main+0x16>
	  	//read ADC value

	  	AD_value = ADC_GetConversionValue(ADC1);
 80007bc:	486e      	ldr	r0, [pc, #440]	; (8000978 <main+0x1e0>)
 80007be:	f000 fc17 	bl	8000ff0 <ADC_GetConversionValue>
 80007c2:	4603      	mov	r3, r0
 80007c4:	807b      	strh	r3, [r7, #2]

	  	if ((AD_value > 1900) && (AD_value < 2100))
 80007c6:	887a      	ldrh	r2, [r7, #2]
 80007c8:	f240 736c 	movw	r3, #1900	; 0x76c
 80007cc:	429a      	cmp	r2, r3
 80007ce:	d930      	bls.n	8000832 <main+0x9a>
 80007d0:	887a      	ldrh	r2, [r7, #2]
 80007d2:	f640 0333 	movw	r3, #2099	; 0x833
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d82b      	bhi.n	8000832 <main+0x9a>
		{
	  		GPIO_SetBits(GPIOA,GPIO_Pin_5);
 80007da:	4868      	ldr	r0, [pc, #416]	; (800097c <main+0x1e4>)
 80007dc:	2120      	movs	r1, #32
 80007de:	f000 f9eb 	bl	8000bb8 <GPIO_SetBits>
	  		for (i=0;i<(65326*0.5);i++){};
 80007e2:	f04f 0300 	mov.w	r3, #0
 80007e6:	607b      	str	r3, [r7, #4]
 80007e8:	e006      	b.n	80007f8 <main+0x60>
 80007ea:	6878      	ldr	r0, [r7, #4]
 80007ec:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80007f0:	f7ff fcca 	bl	8000188 <__addsf3>
 80007f4:	4603      	mov	r3, r0
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	4961      	ldr	r1, [pc, #388]	; (8000980 <main+0x1e8>)
 80007fc:	f7ff fe1a 	bl	8000434 <__aeabi_fcmplt>
 8000800:	4603      	mov	r3, r0
 8000802:	2b00      	cmp	r3, #0
 8000804:	d1f1      	bne.n	80007ea <main+0x52>
	  		GPIO_ResetBits(GPIOA,GPIO_Pin_5);
 8000806:	485d      	ldr	r0, [pc, #372]	; (800097c <main+0x1e4>)
 8000808:	2120      	movs	r1, #32
 800080a:	f000 f9e3 	bl	8000bd4 <GPIO_ResetBits>
	  		for (i=0;i<(65326*0.5);i++){};
 800080e:	f04f 0300 	mov.w	r3, #0
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	e006      	b.n	8000824 <main+0x8c>
 8000816:	6878      	ldr	r0, [r7, #4]
 8000818:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800081c:	f7ff fcb4 	bl	8000188 <__addsf3>
 8000820:	4603      	mov	r3, r0
 8000822:	607b      	str	r3, [r7, #4]
 8000824:	6878      	ldr	r0, [r7, #4]
 8000826:	4956      	ldr	r1, [pc, #344]	; (8000980 <main+0x1e8>)
 8000828:	f7ff fe04 	bl	8000434 <__aeabi_fcmplt>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d1f1      	bne.n	8000816 <main+0x7e>
		}
	  	if ((AD_value > 2800) && (AD_value < 3000))
 8000832:	887b      	ldrh	r3, [r7, #2]
 8000834:	f5b3 6f2f 	cmp.w	r3, #2800	; 0xaf0
 8000838:	d930      	bls.n	800089c <main+0x104>
 800083a:	887a      	ldrh	r2, [r7, #2]
 800083c:	f640 33b7 	movw	r3, #2999	; 0xbb7
 8000840:	429a      	cmp	r2, r3
 8000842:	d82b      	bhi.n	800089c <main+0x104>
		{
			GPIO_SetBits(GPIOA,GPIO_Pin_5);
 8000844:	484d      	ldr	r0, [pc, #308]	; (800097c <main+0x1e4>)
 8000846:	2120      	movs	r1, #32
 8000848:	f000 f9b6 	bl	8000bb8 <GPIO_SetBits>
			for (i=0;i<65326;i++){};
 800084c:	f04f 0300 	mov.w	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	e006      	b.n	8000862 <main+0xca>
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800085a:	f7ff fc95 	bl	8000188 <__addsf3>
 800085e:	4603      	mov	r3, r0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	6878      	ldr	r0, [r7, #4]
 8000864:	4947      	ldr	r1, [pc, #284]	; (8000984 <main+0x1ec>)
 8000866:	f7ff fde5 	bl	8000434 <__aeabi_fcmplt>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d1f1      	bne.n	8000854 <main+0xbc>
			GPIO_ResetBits(GPIOA,GPIO_Pin_5);
 8000870:	4842      	ldr	r0, [pc, #264]	; (800097c <main+0x1e4>)
 8000872:	2120      	movs	r1, #32
 8000874:	f000 f9ae 	bl	8000bd4 <GPIO_ResetBits>
			for (i=0;i<65326;i++){};
 8000878:	f04f 0300 	mov.w	r3, #0
 800087c:	607b      	str	r3, [r7, #4]
 800087e:	e006      	b.n	800088e <main+0xf6>
 8000880:	6878      	ldr	r0, [r7, #4]
 8000882:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000886:	f7ff fc7f 	bl	8000188 <__addsf3>
 800088a:	4603      	mov	r3, r0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	493c      	ldr	r1, [pc, #240]	; (8000984 <main+0x1ec>)
 8000892:	f7ff fdcf 	bl	8000434 <__aeabi_fcmplt>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d1f1      	bne.n	8000880 <main+0xe8>
		}
	  	if ((AD_value > 3300) && (AD_value < 3550))
 800089c:	887a      	ldrh	r2, [r7, #2]
 800089e:	f640 43e4 	movw	r3, #3300	; 0xce4
 80008a2:	429a      	cmp	r2, r3
 80008a4:	d930      	bls.n	8000908 <main+0x170>
 80008a6:	887a      	ldrh	r2, [r7, #2]
 80008a8:	f640 53dd 	movw	r3, #3549	; 0xddd
 80008ac:	429a      	cmp	r2, r3
 80008ae:	d82b      	bhi.n	8000908 <main+0x170>
		{
			GPIO_SetBits(GPIOA,GPIO_Pin_5);
 80008b0:	4832      	ldr	r0, [pc, #200]	; (800097c <main+0x1e4>)
 80008b2:	2120      	movs	r1, #32
 80008b4:	f000 f980 	bl	8000bb8 <GPIO_SetBits>
			for (i=0;(i<65326*1.5);i++){};
 80008b8:	f04f 0300 	mov.w	r3, #0
 80008bc:	607b      	str	r3, [r7, #4]
 80008be:	e006      	b.n	80008ce <main+0x136>
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80008c6:	f7ff fc5f 	bl	8000188 <__addsf3>
 80008ca:	4603      	mov	r3, r0
 80008cc:	607b      	str	r3, [r7, #4]
 80008ce:	6878      	ldr	r0, [r7, #4]
 80008d0:	492d      	ldr	r1, [pc, #180]	; (8000988 <main+0x1f0>)
 80008d2:	f7ff fdaf 	bl	8000434 <__aeabi_fcmplt>
 80008d6:	4603      	mov	r3, r0
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f1      	bne.n	80008c0 <main+0x128>
			GPIO_ResetBits(GPIOA,GPIO_Pin_5);
 80008dc:	4827      	ldr	r0, [pc, #156]	; (800097c <main+0x1e4>)
 80008de:	2120      	movs	r1, #32
 80008e0:	f000 f978 	bl	8000bd4 <GPIO_ResetBits>
			for (i=0;i<(65326*1.5);i++){};
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	607b      	str	r3, [r7, #4]
 80008ea:	e006      	b.n	80008fa <main+0x162>
 80008ec:	6878      	ldr	r0, [r7, #4]
 80008ee:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80008f2:	f7ff fc49 	bl	8000188 <__addsf3>
 80008f6:	4603      	mov	r3, r0
 80008f8:	607b      	str	r3, [r7, #4]
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	4922      	ldr	r1, [pc, #136]	; (8000988 <main+0x1f0>)
 80008fe:	f7ff fd99 	bl	8000434 <__aeabi_fcmplt>
 8000902:	4603      	mov	r3, r0
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1f1      	bne.n	80008ec <main+0x154>
		}
	  	if ((AD_value > 3550) && (AD_value < 3750))
 8000908:	887a      	ldrh	r2, [r7, #2]
 800090a:	f640 53de 	movw	r3, #3550	; 0xdde
 800090e:	429a      	cmp	r2, r3
 8000910:	d930      	bls.n	8000974 <main+0x1dc>
 8000912:	887a      	ldrh	r2, [r7, #2]
 8000914:	f640 63a5 	movw	r3, #3749	; 0xea5
 8000918:	429a      	cmp	r2, r3
 800091a:	d82b      	bhi.n	8000974 <main+0x1dc>
		{
			GPIO_SetBits(GPIOA,GPIO_Pin_5);
 800091c:	4817      	ldr	r0, [pc, #92]	; (800097c <main+0x1e4>)
 800091e:	2120      	movs	r1, #32
 8000920:	f000 f94a 	bl	8000bb8 <GPIO_SetBits>
			for (i=0;i<(65326*2);i++){};
 8000924:	f04f 0300 	mov.w	r3, #0
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	e006      	b.n	800093a <main+0x1a2>
 800092c:	6878      	ldr	r0, [r7, #4]
 800092e:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 8000932:	f7ff fc29 	bl	8000188 <__addsf3>
 8000936:	4603      	mov	r3, r0
 8000938:	607b      	str	r3, [r7, #4]
 800093a:	6878      	ldr	r0, [r7, #4]
 800093c:	4913      	ldr	r1, [pc, #76]	; (800098c <main+0x1f4>)
 800093e:	f7ff fd79 	bl	8000434 <__aeabi_fcmplt>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <main+0x194>
			GPIO_ResetBits(GPIOA,GPIO_Pin_5);
 8000948:	480c      	ldr	r0, [pc, #48]	; (800097c <main+0x1e4>)
 800094a:	2120      	movs	r1, #32
 800094c:	f000 f942 	bl	8000bd4 <GPIO_ResetBits>
			for (i=0;i<(65326*2);i++){};
 8000950:	f04f 0300 	mov.w	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	e006      	b.n	8000966 <main+0x1ce>
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 800095e:	f7ff fc13 	bl	8000188 <__addsf3>
 8000962:	4603      	mov	r3, r0
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	4908      	ldr	r1, [pc, #32]	; (800098c <main+0x1f4>)
 800096a:	f7ff fd63 	bl	8000434 <__aeabi_fcmplt>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d1f1      	bne.n	8000958 <main+0x1c0>
		}
  }
 8000974:	e717      	b.n	80007a6 <main+0xe>
 8000976:	bf00      	nop
 8000978:	40012400 	.word	0x40012400
 800097c:	40020000 	.word	0x40020000
 8000980:	46ff2e00 	.word	0x46ff2e00
 8000984:	477f2e00 	.word	0x477f2e00
 8000988:	47bf6280 	.word	0x47bf6280
 800098c:	47ff2e00 	.word	0x47ff2e00

08000990 <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <RCC_HSICmd+0x1c>)
 800099c:	79fa      	ldrb	r2, [r7, #7]
 800099e:	601a      	str	r2, [r3, #0]
}
 80009a0:	370c      	adds	r7, #12
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	42470000 	.word	0x42470000

080009b0 <RCC_AHBPeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHBPeriphClockCmd(uint32_t RCC_AHBPeriph, FunctionalState NewState)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
 80009b8:	460b      	mov	r3, r1
 80009ba:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB_PERIPH(RCC_AHBPeriph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 80009bc:	78fb      	ldrb	r3, [r7, #3]
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d006      	beq.n	80009d0 <RCC_AHBPeriphClockCmd+0x20>
  {
    RCC->AHBENR |= RCC_AHBPeriph;
 80009c2:	4b09      	ldr	r3, [pc, #36]	; (80009e8 <RCC_AHBPeriphClockCmd+0x38>)
 80009c4:	4a08      	ldr	r2, [pc, #32]	; (80009e8 <RCC_AHBPeriphClockCmd+0x38>)
 80009c6:	69d1      	ldr	r1, [r2, #28]
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	430a      	orrs	r2, r1
 80009cc:	61da      	str	r2, [r3, #28]
 80009ce:	e006      	b.n	80009de <RCC_AHBPeriphClockCmd+0x2e>
  }
  else
  {
    RCC->AHBENR &= ~RCC_AHBPeriph;
 80009d0:	4b05      	ldr	r3, [pc, #20]	; (80009e8 <RCC_AHBPeriphClockCmd+0x38>)
 80009d2:	4a05      	ldr	r2, [pc, #20]	; (80009e8 <RCC_AHBPeriphClockCmd+0x38>)
 80009d4:	69d1      	ldr	r1, [r2, #28]
 80009d6:	687a      	ldr	r2, [r7, #4]
 80009d8:	43d2      	mvns	r2, r2
 80009da:	400a      	ands	r2, r1
 80009dc:	61da      	str	r2, [r3, #28]
  }
}
 80009de:	370c      	adds	r7, #12
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr
 80009e8:	40023800 	.word	0x40023800

080009ec <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b083      	sub	sp, #12
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009f8:	78fb      	ldrb	r3, [r7, #3]
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 80009fe:	4b09      	ldr	r3, [pc, #36]	; (8000a24 <RCC_APB2PeriphClockCmd+0x38>)
 8000a00:	4a08      	ldr	r2, [pc, #32]	; (8000a24 <RCC_APB2PeriphClockCmd+0x38>)
 8000a02:	6a11      	ldr	r1, [r2, #32]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	430a      	orrs	r2, r1
 8000a08:	621a      	str	r2, [r3, #32]
 8000a0a:	e006      	b.n	8000a1a <RCC_APB2PeriphClockCmd+0x2e>
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <RCC_APB2PeriphClockCmd+0x38>)
 8000a0e:	4a05      	ldr	r2, [pc, #20]	; (8000a24 <RCC_APB2PeriphClockCmd+0x38>)
 8000a10:	6a11      	ldr	r1, [r2, #32]
 8000a12:	687a      	ldr	r2, [r7, #4]
 8000a14:	43d2      	mvns	r2, r2
 8000a16:	400a      	ands	r2, r1
 8000a18:	621a      	str	r2, [r3, #32]
  }
}
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40023800 	.word	0x40023800

08000a28 <RCC_GetFlagStatus>:
  *     @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *     @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b087      	sub	sp, #28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000a32:	2300      	movs	r3, #0
 8000a34:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	095b      	lsrs	r3, r3, #5
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	60fb      	str	r3, [r7, #12]

  if (tmp == 1)               /* The flag to check is in CR register */
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d103      	bne.n	8000a54 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000a4c:	4b0f      	ldr	r3, [pc, #60]	; (8000a8c <RCC_GetFlagStatus+0x64>)
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e002      	b.n	8000a5a <RCC_GetFlagStatus+0x32>
  }
  else          /* The flag to check is in CSR register (tmp == 2) */
  {
    statusreg = RCC->CSR;
 8000a54:	4b0d      	ldr	r3, [pc, #52]	; (8000a8c <RCC_GetFlagStatus+0x64>)
 8000a56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a58:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	f003 031f 	and.w	r3, r3, #31
 8000a60:	60fb      	str	r3, [r7, #12]

  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	697a      	ldr	r2, [r7, #20]
 8000a66:	fa22 f303 	lsr.w	r3, r2, r3
 8000a6a:	f003 0301 	and.w	r3, r3, #1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d002      	beq.n	8000a78 <RCC_GetFlagStatus+0x50>
  {
    bitstatus = SET;
 8000a72:	2301      	movs	r3, #1
 8000a74:	74fb      	strb	r3, [r7, #19]
 8000a76:	e001      	b.n	8000a7c <RCC_GetFlagStatus+0x54>
  }
  else
  {
    bitstatus = RESET;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000a7c:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	371c      	adds	r7, #28
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	40023800 	.word	0x40023800

08000a90 <GPIO_Init>:
  *         peripheral.

  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	617b      	str	r3, [r7, #20]
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	613b      	str	r3, [r7, #16]
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	617b      	str	r3, [r7, #20]
 8000aaa:	e07c      	b.n	8000ba6 <GPIO_Init+0x116>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	2201      	movs	r2, #1
 8000ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab4:	613b      	str	r3, [r7, #16]

    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4013      	ands	r3, r2
 8000abe:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 8000ac0:	68fa      	ldr	r2, [r7, #12]
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	429a      	cmp	r2, r3
 8000ac6:	d16b      	bne.n	8000ba0 <GPIO_Init+0x110>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	681a      	ldr	r2, [r3, #0]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	2103      	movs	r1, #3
 8000ad2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ad6:	43db      	mvns	r3, r3
 8000ad8:	401a      	ands	r2, r3
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	601a      	str	r2, [r3, #0]

      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	681a      	ldr	r2, [r3, #0]
 8000ae2:	683b      	ldr	r3, [r7, #0]
 8000ae4:	791b      	ldrb	r3, [r3, #4]
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	fa01 f303 	lsl.w	r3, r1, r3
 8000af0:	431a      	orrs	r2, r3
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	791b      	ldrb	r3, [r3, #4]
 8000afa:	2b01      	cmp	r3, #1
 8000afc:	d003      	beq.n	8000b06 <GPIO_Init+0x76>
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	791b      	ldrb	r3, [r3, #4]
 8000b02:	2b02      	cmp	r3, #2
 8000b04:	d134      	bne.n	8000b70 <GPIO_Init+0xe0>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	689a      	ldr	r2, [r3, #8]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	005b      	lsls	r3, r3, #1
 8000b0e:	2103      	movs	r1, #3
 8000b10:	fa01 f303 	lsl.w	r3, r1, r3
 8000b14:	43db      	mvns	r3, r3
 8000b16:	401a      	ands	r2, r3
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	689a      	ldr	r2, [r3, #8]
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	795b      	ldrb	r3, [r3, #5]
 8000b24:	4619      	mov	r1, r3
 8000b26:	697b      	ldr	r3, [r7, #20]
 8000b28:	005b      	lsls	r3, r3, #1
 8000b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	609a      	str	r2, [r3, #8]

        /*Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration */
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	889b      	ldrh	r3, [r3, #4]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	2101      	movs	r1, #1
 8000b40:	fa01 f303 	lsl.w	r3, r1, r3
 8000b44:	b29b      	uxth	r3, r3
 8000b46:	43db      	mvns	r3, r3
 8000b48:	b29b      	uxth	r3, r3
 8000b4a:	4013      	ands	r3, r2
 8000b4c:	b29a      	uxth	r2, r3
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	809a      	strh	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	889b      	ldrh	r3, [r3, #4]
 8000b56:	b29a      	uxth	r2, r3
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	799b      	ldrb	r3, [r3, #6]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	b29b      	uxth	r3, r3
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	b29a      	uxth	r2, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	809a      	strh	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	68da      	ldr	r2, [r3, #12]
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	b29b      	uxth	r3, r3
 8000b78:	005b      	lsls	r3, r3, #1
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b80:	43db      	mvns	r3, r3
 8000b82:	401a      	ands	r2, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	68da      	ldr	r2, [r3, #12]
 8000b8c:	683b      	ldr	r3, [r7, #0]
 8000b8e:	79db      	ldrb	r3, [r3, #7]
 8000b90:	4619      	mov	r1, r3
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa01 f303 	lsl.w	r3, r1, r3
 8000b9a:	431a      	orrs	r2, r3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	60da      	str	r2, [r3, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* -------------------------Configure the port pins---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000ba0:	697b      	ldr	r3, [r7, #20]
 8000ba2:	3301      	adds	r3, #1
 8000ba4:	617b      	str	r3, [r7, #20]
 8000ba6:	697b      	ldr	r3, [r7, #20]
 8000ba8:	2b0f      	cmp	r3, #15
 8000baa:	f67f af7f 	bls.w	8000aac <GPIO_Init+0x1c>
      /* Pull-up Pull down resistor configuration */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
    }
  }
}
 8000bae:	371c      	adds	r7, #28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb6:	4770      	bx	lr

08000bb8 <GPIO_SetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_SetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b083      	sub	sp, #12
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
 8000bc0:	460b      	mov	r3, r1
 8000bc2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRL = GPIO_Pin;
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	887a      	ldrh	r2, [r7, #2]
 8000bc8:	831a      	strh	r2, [r3, #24]
}
 8000bca:	370c      	adds	r7, #12
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr

08000bd4 <GPIO_ResetBits>:
  *        accesses. In this way, there is no risk of an IRQ occurring between
  *        the read and the modify access.
  * @retval None
  */
void GPIO_ResetBits(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b083      	sub	sp, #12
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  
  GPIOx->BSRRH = GPIO_Pin;
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	887a      	ldrh	r2, [r7, #2]
 8000be4:	835a      	strh	r2, [r3, #26]
}
 8000be6:	370c      	adds	r7, #12
 8000be8:	46bd      	mov	sp, r7
 8000bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bee:	4770      	bx	lr

08000bf0 <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains 
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)               
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
 8000bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	60fb      	str	r3, [r7, #12]
  /* Clear RES and SCAN bits */ 
  tmpreg1 &= CR1_CLEAR_MASK;
 8000c08:	68fb      	ldr	r3, [r7, #12]
 8000c0a:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000c0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c12:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | ADC_InitStruct->ADC_Resolution);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	791b      	ldrb	r3, [r3, #4]
 8000c18:	021a      	lsls	r2, r3, #8
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	68fa      	ldr	r2, [r7, #12]
 8000c22:	4313      	orrs	r3, r2
 8000c24:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	68fa      	ldr	r2, [r7, #12]
 8000c2a:	605a      	str	r2, [r3, #4]
  
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	689b      	ldr	r3, [r3, #8]
 8000c30:	60fb      	str	r3, [r7, #12]
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 8000c32:	68fa      	ldr	r2, [r7, #12]
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <ADC_Init+0xa4>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	691a      	ldr	r2, [r3, #16]
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68db      	ldr	r3, [r3, #12]
 8000c42:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	689b      	ldr	r3, [r3, #8]
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c48:	431a      	orrs	r2, r3
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	795b      	ldrb	r3, [r3, #5]
 8000c4e:	005b      	lsls	r3, r3, #1
  /* Configure ADCx: external trigger event and edge, data alignment and continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | ADC_InitStruct->ADC_ExternalTrigConv | 
 8000c50:	4313      	orrs	r3, r2
 8000c52:	68fa      	ldr	r2, [r7, #12]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60fb      	str	r3, [r7, #12]
              ADC_InitStruct->ADC_ExternalTrigConvEdge | ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	68fa      	ldr	r2, [r7, #12]
 8000c5c:	609a      	str	r2, [r3, #8]
  
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	60fb      	str	r3, [r7, #12]
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	f023 73f8 	bic.w	r3, r3, #32505856	; 0x1f00000
 8000c6a:	60fb      	str	r3, [r7, #12]
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */ 
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	7d1b      	ldrb	r3, [r3, #20]
 8000c70:	3b01      	subs	r3, #1
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	7afb      	ldrb	r3, [r7, #11]
 8000c76:	4313      	orrs	r3, r2
 8000c78:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000c7a:	7afb      	ldrb	r3, [r7, #11]
 8000c7c:	051b      	lsls	r3, r3, #20
 8000c7e:	68fa      	ldr	r2, [r7, #12]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	631a      	str	r2, [r3, #48]	; 0x30
}
 8000c8a:	3714      	adds	r7, #20
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	c0fff7fd 	.word	0xc0fff7fd

08000c98 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)                            
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Reset ADC init structure parameters values */
  /* Initialize the ADC_Resolution member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

  /* Initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T2_CC2;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8000cbe:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	2201      	movs	r2, #1
 8000cca:	751a      	strb	r2, [r3, #20]
}
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000ce4:	78fb      	ldrb	r3, [r7, #3]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d006      	beq.n	8000cf8 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	689b      	ldr	r3, [r3, #8]
 8000cee:	f043 0201 	orr.w	r2, r3, #1
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	e005      	b.n	8000d04 <ADC_Cmd+0x2c>
  }
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f023 0201 	bic.w	r2, r3, #1
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  }
}
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <ADC_RegularChannelConfig>:
  *     @arg ADC_SampleTime_192Cycles: Sample time equal to 192 cycles	
  *     @arg ADC_SampleTime_384Cycles: Sample time equal to 384 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	70f9      	strb	r1, [r7, #3]
 8000d1a:	70ba      	strb	r2, [r7, #2]
 8000d1c:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60fb      	str	r3, [r7, #12]
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));

  /* If ADC_Channel_30 or ADC_Channel_31 is selected */
  if (ADC_Channel > ADC_Channel_29)
 8000d26:	78fb      	ldrb	r3, [r7, #3]
 8000d28:	2b1d      	cmp	r3, #29
 8000d2a:	d923      	bls.n	8000d74 <ADC_RegularChannelConfig+0x64>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR0;
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d30:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR0_SMP_SET << (3 * (ADC_Channel - 30));
 8000d32:	78fb      	ldrb	r3, [r7, #3]
 8000d34:	f1a3 021e 	sub.w	r2, r3, #30
 8000d38:	4613      	mov	r3, r2
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	4413      	add	r3, r2
 8000d3e:	2207      	movs	r2, #7
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d46:	68bb      	ldr	r3, [r7, #8]
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	68fa      	ldr	r2, [r7, #12]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 30));
 8000d50:	7879      	ldrb	r1, [r7, #1]
 8000d52:	78fb      	ldrb	r3, [r7, #3]
 8000d54:	f1a3 021e 	sub.w	r2, r3, #30
 8000d58:	4613      	mov	r3, r2
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	4413      	add	r3, r2
 8000d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d62:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000d64:	68fa      	ldr	r2, [r7, #12]
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR0 = tmpreg1;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	68fa      	ldr	r2, [r7, #12]
 8000d70:	65da      	str	r2, [r3, #92]	; 0x5c
 8000d72:	e06c      	b.n	8000e4e <ADC_RegularChannelConfig+0x13e>
  }
  /* If ADC_Channel_20 ... ADC_Channel_29 is selected */
  else if (ADC_Channel > ADC_Channel_19)
 8000d74:	78fb      	ldrb	r3, [r7, #3]
 8000d76:	2b13      	cmp	r3, #19
 8000d78:	d923      	bls.n	8000dc2 <ADC_RegularChannelConfig+0xb2>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68db      	ldr	r3, [r3, #12]
 8000d7e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 20));
 8000d80:	78fb      	ldrb	r3, [r7, #3]
 8000d82:	f1a3 0214 	sub.w	r2, r3, #20
 8000d86:	4613      	mov	r3, r2
 8000d88:	005b      	lsls	r3, r3, #1
 8000d8a:	4413      	add	r3, r2
 8000d8c:	2207      	movs	r2, #7
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000d94:	68bb      	ldr	r3, [r7, #8]
 8000d96:	43db      	mvns	r3, r3
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 20));
 8000d9e:	7879      	ldrb	r1, [r7, #1]
 8000da0:	78fb      	ldrb	r3, [r7, #3]
 8000da2:	f1a3 0214 	sub.w	r2, r3, #20
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	fa01 f303 	lsl.w	r3, r1, r3
 8000db0:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000db2:	68fa      	ldr	r2, [r7, #12]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	4313      	orrs	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	68fa      	ldr	r2, [r7, #12]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	e045      	b.n	8000e4e <ADC_RegularChannelConfig+0x13e>
  }
  /* If ADC_Channel_10 ... ADC_Channel_19 is selected */
  else if (ADC_Channel > ADC_Channel_9)
 8000dc2:	78fb      	ldrb	r3, [r7, #3]
 8000dc4:	2b09      	cmp	r3, #9
 8000dc6:	d923      	bls.n	8000e10 <ADC_RegularChannelConfig+0x100>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	691b      	ldr	r3, [r3, #16]
 8000dcc:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * (ADC_Channel - 10));
 8000dce:	78fb      	ldrb	r3, [r7, #3]
 8000dd0:	f1a3 020a 	sub.w	r2, r3, #10
 8000dd4:	4613      	mov	r3, r2
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	4413      	add	r3, r2
 8000dda:	2207      	movs	r2, #7
 8000ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8000de0:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000de2:	68bb      	ldr	r3, [r7, #8]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	68fa      	ldr	r2, [r7, #12]
 8000de8:	4013      	ands	r3, r2
 8000dea:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 8000dec:	7879      	ldrb	r1, [r7, #1]
 8000dee:	78fb      	ldrb	r3, [r7, #3]
 8000df0:	f1a3 020a 	sub.w	r2, r3, #10
 8000df4:	4613      	mov	r3, r2
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	4413      	add	r3, r2
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e00:	68fa      	ldr	r2, [r7, #12]
 8000e02:	68bb      	ldr	r3, [r7, #8]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	611a      	str	r2, [r3, #16]
 8000e0e:	e01e      	b.n	8000e4e <ADC_RegularChannelConfig+0x13e>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR3;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	695b      	ldr	r3, [r3, #20]
 8000e14:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SMPR3_SMP_SET << (3 * ADC_Channel);
 8000e16:	78fa      	ldrb	r2, [r7, #3]
 8000e18:	4613      	mov	r3, r2
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	4413      	add	r3, r2
 8000e1e:	2207      	movs	r2, #7
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	60bb      	str	r3, [r7, #8]
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000e26:	68bb      	ldr	r3, [r7, #8]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 8000e30:	7879      	ldrb	r1, [r7, #1]
 8000e32:	78fa      	ldrb	r2, [r7, #3]
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	60bb      	str	r3, [r7, #8]
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 8000e40:	68fa      	ldr	r2, [r7, #12]
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SMPR3 = tmpreg1;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	68fa      	ldr	r2, [r7, #12]
 8000e4c:	615a      	str	r2, [r3, #20]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 8000e4e:	78bb      	ldrb	r3, [r7, #2]
 8000e50:	2b06      	cmp	r3, #6
 8000e52:	d821      	bhi.n	8000e98 <ADC_RegularChannelConfig+0x188>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR5;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e58:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR5_SQ_SET << (5 * (Rank - 1));
 8000e5a:	78bb      	ldrb	r3, [r7, #2]
 8000e5c:	1e5a      	subs	r2, r3, #1
 8000e5e:	4613      	mov	r3, r2
 8000e60:	009b      	lsls	r3, r3, #2
 8000e62:	4413      	add	r3, r2
 8000e64:	221f      	movs	r2, #31
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	68fa      	ldr	r2, [r7, #12]
 8000e72:	4013      	ands	r3, r2
 8000e74:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000e76:	78f9      	ldrb	r1, [r7, #3]
 8000e78:	78bb      	ldrb	r3, [r7, #2]
 8000e7a:	1e5a      	subs	r2, r3, #1
 8000e7c:	4613      	mov	r3, r2
 8000e7e:	009b      	lsls	r3, r3, #2
 8000e80:	4413      	add	r3, r2
 8000e82:	fa01 f303 	lsl.w	r3, r1, r3
 8000e86:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000e88:	68fa      	ldr	r2, [r7, #12]
 8000e8a:	68bb      	ldr	r3, [r7, #8]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR5 = tmpreg1;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	641a      	str	r2, [r3, #64]	; 0x40
 8000e96:	e095      	b.n	8000fc4 <ADC_RegularChannelConfig+0x2b4>
  }
  /* For Rank 7 to 12 */
  else if (Rank < 13)
 8000e98:	78bb      	ldrb	r3, [r7, #2]
 8000e9a:	2b0c      	cmp	r3, #12
 8000e9c:	d821      	bhi.n	8000ee2 <ADC_RegularChannelConfig+0x1d2>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR4;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ea2:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR4_SQ_SET << (5 * (Rank - 7));
 8000ea4:	78bb      	ldrb	r3, [r7, #2]
 8000ea6:	1fda      	subs	r2, r3, #7
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	009b      	lsls	r3, r3, #2
 8000eac:	4413      	add	r3, r2
 8000eae:	221f      	movs	r2, #31
 8000eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb4:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	68fa      	ldr	r2, [r7, #12]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 8000ec0:	78f9      	ldrb	r1, [r7, #3]
 8000ec2:	78bb      	ldrb	r3, [r7, #2]
 8000ec4:	1fda      	subs	r2, r3, #7
 8000ec6:	4613      	mov	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	4413      	add	r3, r2
 8000ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ed0:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR4 = tmpreg1;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	68fa      	ldr	r2, [r7, #12]
 8000ede:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ee0:	e070      	b.n	8000fc4 <ADC_RegularChannelConfig+0x2b4>
  }  
  /* For Rank 13 to 18 */
  else if (Rank < 19)
 8000ee2:	78bb      	ldrb	r3, [r7, #2]
 8000ee4:	2b12      	cmp	r3, #18
 8000ee6:	d823      	bhi.n	8000f30 <ADC_RegularChannelConfig+0x220>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eec:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 13));
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	f1a3 020d 	sub.w	r2, r3, #13
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4413      	add	r3, r2
 8000efa:	221f      	movs	r2, #31
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	43db      	mvns	r3, r3
 8000f06:	68fa      	ldr	r2, [r7, #12]
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000f0c:	78f9      	ldrb	r1, [r7, #3]
 8000f0e:	78bb      	ldrb	r3, [r7, #2]
 8000f10:	f1a3 020d 	sub.w	r2, r3, #13
 8000f14:	4613      	mov	r3, r2
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	4413      	add	r3, r2
 8000f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1e:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f20:	68fa      	ldr	r2, [r7, #12]
 8000f22:	68bb      	ldr	r3, [r7, #8]
 8000f24:	4313      	orrs	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	68fa      	ldr	r2, [r7, #12]
 8000f2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000f2e:	e049      	b.n	8000fc4 <ADC_RegularChannelConfig+0x2b4>
  }
    
  /* For Rank 19 to 24 */
  else if (Rank < 25)
 8000f30:	78bb      	ldrb	r3, [r7, #2]
 8000f32:	2b18      	cmp	r3, #24
 8000f34:	d823      	bhi.n	8000f7e <ADC_RegularChannelConfig+0x26e>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR2;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 19));
 8000f3c:	78bb      	ldrb	r3, [r7, #2]
 8000f3e:	f1a3 0213 	sub.w	r2, r3, #19
 8000f42:	4613      	mov	r3, r2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	4413      	add	r3, r2
 8000f48:	221f      	movs	r2, #31
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f50:	68bb      	ldr	r3, [r7, #8]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	68fa      	ldr	r2, [r7, #12]
 8000f56:	4013      	ands	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 19));
 8000f5a:	78f9      	ldrb	r1, [r7, #3]
 8000f5c:	78bb      	ldrb	r3, [r7, #2]
 8000f5e:	f1a3 0213 	sub.w	r2, r3, #19
 8000f62:	4613      	mov	r3, r2
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	4413      	add	r3, r2
 8000f68:	fa01 f303 	lsl.w	r3, r1, r3
 8000f6c:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000f6e:	68fa      	ldr	r2, [r7, #12]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	4313      	orrs	r3, r2
 8000f74:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR2 = tmpreg1;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	68fa      	ldr	r2, [r7, #12]
 8000f7a:	635a      	str	r2, [r3, #52]	; 0x34
 8000f7c:	e022      	b.n	8000fc4 <ADC_RegularChannelConfig+0x2b4>
  
  /* For Rank 25 to 28 */
  else
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR1;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to clear */
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 25));
 8000f84:	78bb      	ldrb	r3, [r7, #2]
 8000f86:	f1a3 0219 	sub.w	r2, r3, #25
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	221f      	movs	r2, #31
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	60bb      	str	r3, [r7, #8]
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	60fb      	str	r3, [r7, #12]
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 25));
 8000fa2:	78f9      	ldrb	r1, [r7, #3]
 8000fa4:	78bb      	ldrb	r3, [r7, #2]
 8000fa6:	f1a3 0219 	sub.w	r2, r3, #25
 8000faa:	4613      	mov	r3, r2
 8000fac:	009b      	lsls	r3, r3, #2
 8000fae:	4413      	add	r3, r2
 8000fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb4:	60bb      	str	r3, [r7, #8]
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000fb6:	68fa      	ldr	r2, [r7, #12]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	60fb      	str	r3, [r7, #12]
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68fa      	ldr	r2, [r7, #12]
 8000fc2:	631a      	str	r2, [r3, #48]	; 0x30
  }
}
 8000fc4:	3714      	adds	r7, #20
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop

08000fd0 <ADC_SoftwareStartConv>:
  * @brief  Enables the selected ADC software start conversion of the regular channels.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval None
  */
void ADC_SoftwareStartConv(ADC_TypeDef* ADCx)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Enable the selected ADC conversion for regular group */
  ADCx->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
}
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1 to select the ADC1 peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));

  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ffc:	b29b      	uxth	r3, r3
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop

0800100c <ADC_GetFlagStatus>:
  *     @arg ADC_FLAG_RCNR: Regular channel not ready
  *     @arg ADC_FLAG_JCNR: Injected channel not ready
  * @retval The new state of ADC_FLAG (SET or RESET).
  */
FlagStatus ADC_GetFlagStatus(ADC_TypeDef* ADCx, uint16_t ADC_FLAG)
{
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	460b      	mov	r3, r1
 8001016:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_ADC_GET_FLAG(ADC_FLAG));

  /* Check the status of the specified ADC flag */
  if ((ADCx->SR & ADC_FLAG) != (uint8_t)RESET)
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	887b      	ldrh	r3, [r7, #2]
 8001022:	4013      	ands	r3, r2
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <ADC_GetFlagStatus+0x22>
  {
    /* ADC_FLAG is set */
    bitstatus = SET;
 8001028:	2301      	movs	r3, #1
 800102a:	73fb      	strb	r3, [r7, #15]
 800102c:	e001      	b.n	8001032 <ADC_GetFlagStatus+0x26>
  }
  else
  {
    /* ADC_FLAG is reset */
    bitstatus = RESET;
 800102e:	2300      	movs	r3, #0
 8001030:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the ADC_FLAG status */
  return  bitstatus;
 8001032:	7bfb      	ldrb	r3, [r7, #15]
}
 8001034:	4618      	mov	r0, r3
 8001036:	3714      	adds	r7, #20
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr

08001040 <__libc_init_array>:
 8001040:	b570      	push	{r4, r5, r6, lr}
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <__libc_init_array+0x3c>)
 8001044:	4d0e      	ldr	r5, [pc, #56]	; (8001080 <__libc_init_array+0x40>)
 8001046:	2400      	movs	r4, #0
 8001048:	1aed      	subs	r5, r5, r3
 800104a:	10ad      	asrs	r5, r5, #2
 800104c:	461e      	mov	r6, r3
 800104e:	42ac      	cmp	r4, r5
 8001050:	d004      	beq.n	800105c <__libc_init_array+0x1c>
 8001052:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001056:	4790      	blx	r2
 8001058:	3401      	adds	r4, #1
 800105a:	e7f8      	b.n	800104e <__libc_init_array+0xe>
 800105c:	f000 f816 	bl	800108c <_init>
 8001060:	4d08      	ldr	r5, [pc, #32]	; (8001084 <__libc_init_array+0x44>)
 8001062:	4b09      	ldr	r3, [pc, #36]	; (8001088 <__libc_init_array+0x48>)
 8001064:	2400      	movs	r4, #0
 8001066:	1aed      	subs	r5, r5, r3
 8001068:	10ad      	asrs	r5, r5, #2
 800106a:	461e      	mov	r6, r3
 800106c:	42ac      	cmp	r4, r5
 800106e:	d004      	beq.n	800107a <__libc_init_array+0x3a>
 8001070:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8001074:	4790      	blx	r2
 8001076:	3401      	adds	r4, #1
 8001078:	e7f8      	b.n	800106c <__libc_init_array+0x2c>
 800107a:	bd70      	pop	{r4, r5, r6, pc}
 800107c:	080010a4 	.word	0x080010a4
 8001080:	080010a4 	.word	0x080010a4
 8001084:	080010a8 	.word	0x080010a8
 8001088:	080010a4 	.word	0x080010a4

0800108c <_init>:
 800108c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108e:	bf00      	nop
 8001090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001092:	bc08      	pop	{r3}
 8001094:	469e      	mov	lr, r3
 8001096:	4770      	bx	lr

08001098 <_fini>:
 8001098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800109a:	bf00      	nop
 800109c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800109e:	bc08      	pop	{r3}
 80010a0:	469e      	mov	lr, r3
 80010a2:	4770      	bx	lr
